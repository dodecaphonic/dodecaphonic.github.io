<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Troika Tech]]></title>
  <link href="http://troikatech.com/atom.xml" rel="self"/>
  <link href="http://troikatech.com/"/>
  <updated>2015-04-28T23:06:52-03:00</updated>
  <id>http://troikatech.com/</id>
  <author>
    <name><![CDATA[Vitor Capela]]></name>
    <email><![CDATA[dodecaphonic@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby is a friend]]></title>
    <link href="http://troikatech.com/blog/2015/04/28/ruby-is-a-friend/"/>
    <updated>2015-04-28T22:45:00-03:00</updated>
    <id>http://troikatech.com/blog/2015/04/28/ruby-is-a-friend</id>
    <content type="html"><![CDATA[<p>As time goes by, Ruby moves closer and closer to the &ldquo;boring tech&rdquo; bin: it&rsquo;s tried, true and trite (at least by <a href="http://news.ycombinator.com">Hacker News</a> standards). And to be completely honest, I&rsquo;ve often been taken by that same sentiment. The awareness of the privilege to be working with something that remains foreign to most of the Brazilian market has been replaced by a feeling of &ldquo;not cool enough&rdquo;, an anxiety for something as wonderful to happen again.</p>

<p>Analyzing things more carefully, however, I&rsquo;ve realized how much it has allowed me to change as a coder. In Ruby, it&rsquo;s very easy to go from &ldquo;it&rsquo;s like this in language <em>x</em>&rdquo; to &ldquo;it&rsquo;s like this in Ruby, too.&rdquo; The <a href="http://en.wikipedia.org/wiki/Moli%C3%A8re">&ldquo;Belle marquise&rdquo;</a> quality of expression it allows is a source of many joys, and can be quite invigorating as the relationship between it and the programmer develops.</p>

<p>We often feel pressured, in our field, to jump from thing to thing, from shiny to shiny, from silver bullet to silver bullet. &ldquo;The best tool for the job cannot possibly be the tool you had five years ago&rdquo; &mdash; chants the crowd as it tries a new JavaScript build system &mdash; &ldquo;it just isn&rsquo;t right.&rdquo; Reflecting on the role Ruby has had in my life, though, shines light on an aspect we rarely explore: a programming language is a friend. It&rsquo;s not perfect, it can annoy you, but it&rsquo;s there, and by merely being there and helping you think it makes you better.</p>

<p>Ruby is a <em>great</em> friend. We&rsquo;ve been together for almost ten years. I can only hope I&rsquo;ve been making it better too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maybe Haskell]]></title>
    <link href="http://troikatech.com/blog/2015/04/02/maybe-haskell/"/>
    <updated>2015-04-02T08:06:00-03:00</updated>
    <id>http://troikatech.com/blog/2015/04/02/maybe-haskell</id>
    <content type="html"><![CDATA[<p>The programming world is one of trends and fashions. One week you&rsquo;re on the top of the world for using that NoSQL database, and then you&rsquo;re very wrong the next; one day it&rsquo;s all about Rails, the next it&rsquo;s node.js, now it&rsquo;s Go. Using <a href="http://news.ycombinator.com">Hacker News</a> as a compass seemingly means discarding everything you&rsquo;re doing now to follow the next big thing.</p>

<p>Like fashion, though, sometimes one of those new things is actually well-rounded, makes a mark and becomes permanent. Also like fashion, the new thing might be an old thing that people are rediscovering or just now ready to adopt. Judging by what&rsquo;s on the specialized news, <a href="http://en.wikipedia.org/wiki/Functional_programming">Functional Programming</a> is the old-new rage that&rsquo;s changing the world and is here to stay.</p>

<p>It&rsquo;s no wonder: more enlightened programmers and language designers have sprinkled some of the joys of that paradigm upon our OO tools, making us giggle with happiness when chaining <code>map</code>s and <code>inject</code>s and taking blocks to change a method&rsquo;s behavior, or using anonymous and higher-order functions in tired and uncool languages of yesteryear, feeling more productive all the way. It&rsquo;s so transformative to think in pipelines and in functional composition that we end up wanting to know how to learn more and feel <em>even better</em>. Functional Programming called, and you answered.</p>

<p>But lo!, what is a catamorphism? What the hell is a Category, and why does it need a theory? Why did someone put a Monad in my burrito? Is Functor just a funny word Erik Meijer says?</p>

<p>Let&rsquo;s face it: it can be daunting. None of the usual landmarks of what we call <em>programming</em> are there to guide you through learning, and it&rsquo;s easy to feel inadequate and, dare I say it, intellectually inferior. Fear not: <a href="https://twitter.com/patbrisbin">Pat Brisbin</a> knows this, and is here to help.</p>

<h2>The Book</h2>

<p><a href="http://maybe-haskell.com">&ldquo;Maybe Haskell&rdquo;</a>, written by the aforementioned mr. Brisbin, is a book of the short and sweet kind. It quickly acknowledges that it probably will not be the definitive guide on any of the subjects it talks about, and moves right on to the material.</p>

<p>From the gates, the author explains referential transparency and uses equational reasoning to show you how a name for an expression (let&rsquo;s say <code>add(x, y)</code>) can be replaced safely by the expression itself (<code>x + y</code>). This will become a tool later on to clarify that what seems so elaborate is actually pretty straightforward. It&rsquo;s very effective, because it unfolds everything that looks so terse and codified into its components, and those components into their components, working as both a calming device (&ldquo;see how simple it is? It&rsquo;s just about context&rdquo;) and an illustration of the power of function composition.</p>

<p>It then gets to its main thread: what is the <code>Maybe</code> type and how is it built? What does it mean to adopt <code>Maybe</code> in a code base, and how do you deal with it without having every function in your system taking and returning other <code>Maybe</code>s? Even if you&rsquo;ve heard of or applied <code>Maybe</code>, it might give you ideas and reveal unknown subtleties &mdash; especially if all you&rsquo;ve learned about it has been self-directed.</p>

<p>From that on you&rsquo;ll hit three head-scratchers in sequence: Functors, Applicatives and Monads. It begins with showing you ways of not infecting your code with <code>Maybe</code> everywhere and ends with calling functions that take multiple <code>Maybe</code>s, dealing with the possibility of one or more of them not being there. The path is of full of little joys and insights to savor, and you&rsquo;ll get what a Monad <em>does</em> by the end of it (even if the answer to what it <em>is</em> goes through endofunctors and other details).</p>

<p>What I greatly enjoyed was the &ldquo;Other Types&rdquo; section. It&rsquo;s brief, but tackles how you can use the same building blocks to improve designs and make errors and side-effects more explicit. While I knew most of the benefits and the material, I thought about the complete novice and how that section could spark new ideas. I didn&rsquo;t &ldquo;ooh&rdquo; and &ldquo;aah&rdquo; because it was new to me: I did because it will hook a lot of casually interested people who perhaps got the book because it came from someone in the Ruby world and aren&rsquo;t very invested in the ideas of FP yet. It will definitely make <em>Ruby</em>, if nothing else, better.</p>

<p>In the end, even if &ldquo;Maybe Haskell&rdquo; just explains enough of what the language can do to support the examples, the quiet imponence and lack of pretense of the language become very evident. As the text progresses, you&rsquo;ll see the ivory tower where FP wizards live for what it really is: a building that begins on the same ground you and I step on, made out of very solid and simple materials. Luckily we have Pat gently guiding us to that conclusion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ENSIME and Emacs as a Scala IDE]]></title>
    <link href="http://troikatech.com/blog/2014/11/26/ensime-and-emacs-as-a-scala-ide/"/>
    <updated>2014-11-26T10:38:00-02:00</updated>
    <id>http://troikatech.com/blog/2014/11/26/ensime-and-emacs-as-a-scala-ide</id>
    <content type="html"><![CDATA[<p><em>&ldquo;Maybe Emacs is not enough.&rdquo;</em></p>

<p>That popped up in my mind, and it scared me. I knew Scala was a different beast; I knew there was probably a lot I was missing out on by using my tried-and-true workflows; I knew that IntelliJ was supposed to be amazing. Still, thinking Emacs-the-almighty was not enough frightened me.</p>

<p>When I started on this slow path towards learning FP, I had been using dynamic languages almost exclusively for almost 14 years, with a short stop in C++-land for a couple of them. I was used to a world of mostly ok tools centered on a REPL, and it was fine &mdash; programming is more thinking than typing and clicking, that whole <em>spiel</em>. But I had never really done anything in a good type system, and, frankly, it was time I knew how the rest of the world leveraged their tools in order to work more comfortably and effectively.</p>

<p>With that in mind, I evaluated the Typesafe IDE and IntelliJ IDEA 12 and 13, finding a lot of good in both tools (and a few problems, some discussed in my post about the <a href="http://troikatech.com/blog/2014/01/12/reactive">Reactive Programming course</a>). Still, after a few good days with each option, I was tempted to just go back to Emacs and rely on my memory (and <a href="http://kapeli.com/dash">Dash</a>) for the API signatures, do all my code refactorings by hand and use the <code>sbt console</code> for quick explorations.</p>

<p>Then I found out I could have the cake and eat it too.</p>

<h2>Enter ENSIME</h2>

<p>ENSIME (<strong>ENhanced Scala Interaction Mode for Emacs</strong>) is a project that gives Emacs IDE-like capabilities. It performs type and error-checking as you write code, provides symbol inspection, facilities for browsing your codebase and performing automated refactorings. It accomplishes all that using the <a href="http://scala-ide.org/docs/dev/architecture/presentation-compiler.html">Scala Presentation Compiler</a>, a lightweight version of the infrastructure that goes only as far as needed to resolve types, find errors and do semantic highlighting.</p>

<p>Setting it up is super simple. Using MELPA, install the <code>ensime</code> package. Then add the following to your Emacs config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(require 'ensime)
</span><span class='line'>(add-hook 'scala-mode-hook 'ensime-scala-mode-hook)</span></code></pre></td></tr></table></div></figure>


<p>Then add the plugin to your global <code>sbt</code> config (e.g. <code>~/.sbt/0.13/plugins/plugins.sbt</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">resolvers</span> <span class="o">+=</span> <span class="nc">Resolver</span><span class="o">.</span><span class="n">sonatypeRepo</span><span class="o">(</span><span class="s">&quot;snapshots&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">addSbtPlugin</span><span class="o">(</span><span class="s">&quot;org.ensime&quot;</span> <span class="o">%</span> <span class="s">&quot;ensime-sbt&quot;</span> <span class="o">%</span> <span class="s">&quot;0.1.5-SNAPSHOT&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then, in your project directory, run <code>sbt gen-ensime</code> (requires sbt >= 0.13.5). It will resolve the dependencies, install the ENSIME plugin and leave everything ready to go.</p>

<p>Now, when you open a buffer, you&rsquo;re gonna see the following in your mode line:</p>

<p><img src="https://dl.dropboxusercontent.com/s/zss0kz5lr8hvhmr/2014-11-27%20at%2010.22.png" title="ENSIME Disconnected" ></p>

<p>Use <code>M-x ensime</code> to start a connection. It might take a few seconds for it to do what it must to analyze your project, but you&rsquo;ll eventually see the mode line change to show it&rsquo;s ready to work.</p>

<h2>Code completion</h2>

<p>One of the cool things ENSIME provides is real code completion, based on the type you&rsquo;re dealing with. Instead of the usual <code>M-/</code> cycling, you can explore an API by looking at the method signatures and documentation. Here&rsquo;s the thing in action:</p>

<p><img src="https://s3.amazonaws.com/troikatech/ensime_as_ide/completion.gif" title="Completing" ></p>

<h2>Type inspection</h2>

<p>Sometimes Scala&rsquo;s type inference engine gets confused, giving you something too broad or too narrow for your needs; other times, you just want to know the type of a <code>val</code>. Worry not: ENSIME can tell you what has been inferenced just by putting the cursor over the token you want and pressing <code>C-c C-v i</code> (works a bit like <code>:t</code> in <code>ghci</code>).</p>

<p><img src="https://s3.amazonaws.com/troikatech/ensime_as_ide/type_at_point.gif" title="Inspecting types" ></p>

<p>You can also show uses of a symbol by pressing <code>C-c C-v r</code>.</p>

<h2>Automated Refactorings</h2>

<p>ENSIME offers six simple, but extremely useful automated refactorings:</p>

<ul>
<li>Inline Local</li>
<li>Extract Local</li>
<li>Extract Method</li>
<li>Rename</li>
<li>Organize Imports</li>
<li>Import Type at Point</li>
</ul>


<p><img src="https://s3.amazonaws.com/troikatech/ensime_as_ide/refactoring.gif" title="Refactoring" ></p>

<p>Of all of these, <em>Import Type at Point</em> is the only one I&rsquo;d consider flaky. It resolves the type perfectly, but inserts the <code>import</code> statement inline. I don&rsquo;t know if that&rsquo;s configurable. Otherwise, it works as many other automated tools: finds each change, shows you the substitution, asks you to ok it.</p>

<h2>Navigation</h2>

<p>You can use <code>M-.</code> and <code>M-*</code>, normally associated with finding tags, to move inside your project.</p>

<p><img src="https://s3.amazonaws.com/troikatech/ensime_as_ide/navigation.gif" title="Navigation" ></p>

<p>You can also jump from implementation to test, and vice versa.</p>

<h2><code>scala</code> and <code>sbt</code> integration</h2>

<p>If you press <code>C-c C-v s</code>, an sbt console will be launched. A lot of my usual Ruby workflow of running specs from keybinds and jumping quickly to the REPL can be reproduced with this feature.</p>

<p>For instance, when you want to run all tests, you press <code>C-c C-b T</code>. When you wish only to invoke <code>testQuick</code>, you use <code>C-c C-b t</code>.</p>

<p>There&rsquo;s keybinds for changing a region or a buffer, too &mdash; useful both for playing with code and exercising your Emacs gymnastics.</p>

<h2>Finally</h2>

<p>ENSIME has been fun to work with. It allows me to focus on code and work comfortably with my (admittedly small) projects. It&rsquo;s a great showcase of Emacs capabilities, and has led a couple of hardcore vim-using friends to show admiration.</p>

<p>If you&rsquo;re doing Scala and don&rsquo;t want to commit to an IDE, but wish to have more of a modern environment, please try ENSIME. I even hear there&rsquo;s vim and jEdit clients.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in Ruby]]></title>
    <link href="http://troikatech.com/blog/2014/07/07/functional-programming-in-ruby/"/>
    <updated>2014-07-07T21:29:00-03:00</updated>
    <id>http://troikatech.com/blog/2014/07/07/functional-programming-in-ruby</id>
    <content type="html"><![CDATA[<p>On June 21th, 2014, I gave a talk about Functional Programming in Ruby in one of <a href="http://rubyonrio.org">RubyOnRio&rsquo;s</a> monthly meetings. I decided to do a short overview of some concepts and techniques in the FP world and then go over <a href="https://twitter.com/garybernhardt">Gary Bernhardt&rsquo;s</a> &ldquo;<a href="https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell">Functional Core, Imperative Shell</a>&rdquo; &mdash; after all, it would be a hard sell if I couldn&rsquo;t show a way said techniques make your everyday coding better.</p>

<p>It didn&rsquo;t get recorded this time, but I thought the slides could be interesting. Here they are.</p>

<script async class="speakerdeck-embed" data-id="77fedf60ddbf0131b761266a7d836638" data-ratio="1.34031413612565" src="http://speakerdeck.com/assets/embed.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Property-based testing in Ruby]]></title>
    <link href="http://troikatech.com/blog/2014/04/02/property-based-testing-in-ruby/"/>
    <updated>2014-04-02T10:32:00-03:00</updated>
    <id>http://troikatech.com/blog/2014/04/02/property-based-testing-in-ruby</id>
    <content type="html"><![CDATA[<p>For the past year or so I have slowly been dipping my feet into the vast functional programming seas. From taking the awesome <a href="http://coursera.org">Coursera</a> <a href="https://www.coursera.org/course/progfun">offerings</a> <a href="https://www.coursera.org/course/reactive">from Typesafe</a> to slowly working through Rúnar Bjarnason&rsquo;s and Paul Chiusano&rsquo;s <em><a href="http://www.manning.com/bjarnason/">Functional Programming in Scala</a></em>, my mind has been expanding proportionally to the time I dedicate to learning its ways. It has been incredibly rewarding and humbling.</p>

<p>One such reward has been coming into direct touch with property-based testing. This technique, first developed by <a href="http://en.wikipedia.org/wiki/QuickCheck">QuickCheck</a> in Haskell-land, spins automated testing on its head: instead of codifying what is proper behavior by asserting that the outputs for given inputs match what is expected, the tester establishes logical properties about what should happen and lets the tool generate loads of inputs to check if they hold. If something goes wrong, the tool will then try to find the smallest test input that breaks the property (<em>falsifies</em> it), a process called <em>shrinking</em>; if it can&rsquo;t find anything, you can sigh with relief and think about what to scrutinize next.</p>

<p>Having a QuickCheck-like tool at your disposal can be incredibly powerful. The more complex the software or the algorithm, the greater the likelihood of your carefully curated unit and integration tests having blind spots. <a href="http://basho.com">Basho</a>, for instance, <a href="http://basho.com/quickchecking-poolboy-for-fun-and-profit/">have written about the stark realization that their worker pool library was full of subtle bugs by using QuickCheck for Erlang</a>, and you can find <a href="http://www.quviq.com/documents/erlang001-arts.pdf">other</a> <a href="http://www.autosar.org/download/conferencedocs11/12_AUTOSAR_ModelBased_Quviq.pdf">instances</a> of how the technique helped make better software.</p>

<p>I don&rsquo;t know about you, but when I come in contact with stuff like that I immediately think of how improved parts of my day job would be if I just could apply it. Considering that my daily duties are conducted in Ruby, I felt it was time I explored the subject in that realm.</p>

<h2>A contrived setup that hopefully shows how it can work out</h2>

<p>Let&rsquo;s say we&rsquo;ve decided to implement our own linked list class in Ruby. We would probably start our implementation with something like this:</p>

<figure class='code'><figcaption><span>&#8220;List&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;singleton&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Nil</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">empty?</span><span class="p">;</span> <span class="kp">true</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;Nil&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Cons</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@head</span> <span class="o">=</span> <span class="n">head</span>
</span><span class='line'>    <span class="vi">@tail</span> <span class="o">=</span> <span class="n">tail</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:head</span><span class="p">,</span> <span class="ss">:tail</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">empty?</span><span class="p">;</span> <span class="kp">false</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;(</span><span class="si">#{</span><span class="n">head</span><span class="si">}</span><span class="s2"> . </span><span class="si">#{</span><span class="n">tail</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using that <em>very</em> convenient API, we can build lists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)))</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">l</span><span class="o">.</span><span class="n">to_s</span> <span class="c1"># =&gt; &quot;(1 . (2 . (3 . Nil)))&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We know that, in a linked list, adding to the head is O(1), while appending to the end is O(n). So we build algorithms that respect its efficiency guarantees. However, when we, say, map this list into another list, it results in the following situation:</p>

<figure class='code'><figcaption><span>&#8220;List&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">do_something_amazing</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">acc</span> <span class="o">=</span> <span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>  <span class="n">super_value</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="n">head</span> <span class="o">*</span> <span class="mi">1337</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">list</span><span class="o">.</span><span class="n">tail</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">acc</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">do_something_amazing</span><span class="p">(</span><span class="n">list</span><span class="o">.</span><span class="n">tail</span><span class="p">,</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">super_value</span><span class="p">,</span> <span class="n">acc</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">do_something</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="c1"># =&gt; &quot;(4011 . (2674 . (1337 . Nil)))&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Processing things from head to tail means the list ends up reversed. It&rsquo;s common, then, to reverse it back when we&rsquo;re done processing, to preserve the order an external user would expect. Let&rsquo;s add a <code>reverse</code> method to a <code>List</code> helper module:</p>

<figure class='code'><figcaption><span>&#8220;List&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">List</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">reverse</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">acc</span> <span class="o">=</span> <span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">list</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="n">acc</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">reverse</span><span class="p">(</span><span class="n">list</span><span class="o">.</span><span class="n">tail</span><span class="p">,</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">list</span><span class="o">.</span><span class="n">head</span><span class="p">,</span> <span class="n">acc</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when we try to reverse what was created in <code>do_something_amazing</code>, we get what we need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">do_something_amazing</span><span class="p">(</span><span class="n">l</span><span class="p">))</span><span class="o">.</span><span class="n">to_s</span> <span class="c1"># =&gt; &quot;(1337 . (2674 . (4011 . Nil)))&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome. I think this is enough for us to start exploring properties. If you&rsquo;re getting bored, take a sip of coffee and come back when you&rsquo;re ready. There&rsquo;s a few cool tricks below the fold.</p>

<h2>Testing the old way</h2>

<p>Being the good developers we are, we are covering that code with tests:</p>

<figure class='code'><figcaption><span>&#8220;List Tests&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list_test-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ListTest</span> <span class="o">&lt;</span> <span class="ss">MiniTest</span><span class="p">:</span><span class="ss">:Test</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_reversing_lists</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;(3 . (2 . (1 . Nil)))&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">))))</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;(9 . (400 . (321 . (1 . (10 . Nil)))))&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">321</span><span class="p">,</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">9</span><span class="p">))))))</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;Nil&quot;</span><span class="p">,</span> <span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;(1 . Nil)&quot;</span><span class="p">,</span> <span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re pretty confident that&rsquo;s enough, even if it was kind of boring to do manually. That amount of testing would let us go home and sleep soundly.</p>

<h2>Testing the QuickCheck way</h2>

<p>First, we&rsquo;ll need something like QuickCheck in Ruby. The best, most idiomatic, most maintained, least-Monad-y thing I have found is <a href="https://github.com/hayeah/rantly">Rantly</a>. It has both primitive value generation built-in and property testing with shrinking. We&rsquo;ll skip over the basic API and go straight to defining a property to check if my algorithm is really bullet-proof. To aid in the creation of lists from Arrays, we&rsquo;ll add a new helper:</p>

<figure class='code'><figcaption><span>&#8220;List&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">List</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_values</span><span class="p">(</span><span class="o">*</span><span class="n">values</span><span class="p">)</span>
</span><span class='line'>    <span class="n">values</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">ls</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">ls</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To check that it works, let&rsquo;s change the existing tests and see if they still pass:</p>

<figure class='code'><figcaption><span>&#8220;List Tests&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list_test-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ListTest</span> <span class="o">&lt;</span> <span class="ss">MiniTest</span><span class="p">:</span><span class="ss">:Test</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_reversing_lists</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;(3 . (2 . (1 . Nil)))&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="no">List</span><span class="o">.</span><span class="n">from_values</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;(9 . (400 . (321 . (1 . (10 . Nil)))))&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="no">List</span><span class="o">.</span><span class="n">from_values</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">321</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">9</span><span class="p">))</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;Nil&quot;</span><span class="p">,</span> <span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;(1 . Nil)&quot;</span><span class="p">,</span> <span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="no">List</span><span class="o">.</span><span class="n">from_values</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>&#8220;List Tests&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list_test-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Run</span> <span class="ss">options</span><span class="p">:</span> <span class="o">--</span><span class="n">seed</span> <span class="mi">48889</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Running:</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mo">001256</span><span class="n">s</span><span class="p">,</span> <span class="mi">796</span><span class="o">.</span><span class="mi">1783</span> <span class="n">runs</span><span class="o">/</span><span class="n">s</span><span class="p">,</span> <span class="mi">3184</span><span class="o">.</span><span class="mi">7134</span> <span class="n">assertions</span><span class="o">/</span><span class="n">s</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">4</span> <span class="n">assertions</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span><span class="p">,</span> <span class="mi">0</span> <span class="n">errors</span><span class="p">,</span> <span class="mi">0</span> <span class="n">skips</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great. Now to the newfangled thing. As I mentioned before, writing a property to check requires us to think differently than we would with regular unit tests. Your formulation should state something logical, something that does not rely on specific inputs. Following that guideline, we can reason about reversing lists in the following manner:</p>

<figure class='code'><figcaption><span>&#8220;List Tests&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list2_test-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_reversing_by_property</span>
</span><span class='line'>    <span class="n">property</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">length</span> <span class="o">=</span> <span class="n">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1_000_000</span><span class="p">)</span>
</span><span class='line'>      <span class="no">List</span><span class="o">.</span><span class="n">from_values</span><span class="p">(</span><span class="n">array</span><span class="p">(</span><span class="n">length</span><span class="p">)</span> <span class="p">{</span> <span class="n">integer</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">check</span> <span class="p">{</span> <span class="o">|</span><span class="n">list</span><span class="o">|</span>
</span><span class='line'>      <span class="n">assert_equal</span> <span class="n">list</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="no">List</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">list</span><span class="p">))</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The meat is in the <code>check</code> block. Determining that a list has been reversed correctly requires us to check if reversing it again gets us back to the original list. To seed our check, we build a <code>property</code> block that creats an array with a random length between 0 and 1_000_000, itself filled with random integers. Let&rsquo;s run the tests again:</p>

<figure class='code'><figcaption><span>&#8220;List Tests&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list2_test-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">ruby</span> <span class="n">list</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="no">Run</span> <span class="ss">options</span><span class="p">:</span> <span class="o">--</span><span class="n">seed</span> <span class="mi">17130</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Running:</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="ss">success</span><span class="p">:</span> <span class="mi">100</span> <span class="n">tests</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">121</span><span class="o">.</span><span class="mi">969127</span><span class="n">s</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mo">0164</span> <span class="n">runs</span><span class="o">/</span><span class="n">s</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">8527</span> <span class="n">assertions</span><span class="o">/</span><span class="n">s</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">104</span> <span class="n">assertions</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span><span class="p">,</span> <span class="mi">0</span> <span class="n">errors</span><span class="p">,</span> <span class="mi">0</span> <span class="n">skips</span>
</span></code></pre></td></tr></table></div></figure>


<p>It took a while (we wanted to be thorough, with those million-item arrays), but we&rsquo;re pretty sure it works. I&rsquo;m a believer and I&rsquo;m stoked; when I look at you, however, I see a face that says &ldquo;look, it&rsquo;s cool and all, but isn&rsquo;t it <em>kind of worthless</em>? The tests we had were telling us the same thing, and we only needed the power of our minds to generate the correct inputs. Why go through so much trouble?&rdquo;</p>

<p>Well, what about those times when ours minds fail us?</p>

<h2>Catching a bug with Rantly</h2>

<p>Let&rsquo;s say you&rsquo;re excited about building your own data structures and want to wrap that linked list inside a very inefficient Set. You mutter to yourself that you should make sure items are not inserted twice, which for now seems to be the main difference between Sets and Lists as storage containers.</p>

<p>You build a little more structure into what you already have, adding a <code>prepend</code> method and inlining <code>reverse</code> into a <code>List</code> base class:</p>

<figure class='code'><figcaption><span>&#8220;List 2&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list2-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">List</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Don&#39;t use this directly, fool&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">empty?</span><span class="p">;</span> <span class="kp">true</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prepend</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">acc</span> <span class="o">=</span> <span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">empty?</span>
</span><span class='line'>      <span class="n">acc</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">tail</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">acc</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_values</span><span class="p">(</span><span class="o">*</span><span class="n">values</span><span class="p">)</span>
</span><span class='line'>    <span class="n">values</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">ls</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="no">Cons</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">ls</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Nil</span> <span class="o">&lt;</span> <span class="no">List</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;Nil&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Cons</span> <span class="o">&lt;</span> <span class="no">List</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@head</span> <span class="o">=</span> <span class="n">head</span>
</span><span class='line'>    <span class="vi">@tail</span> <span class="o">=</span> <span class="n">tail</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:head</span><span class="p">,</span> <span class="ss">:tail</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">empty?</span><span class="p">;</span> <span class="kp">false</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;(</span><span class="si">#{</span><span class="n">head</span><span class="si">}</span><span class="s2"> . </span><span class="si">#{</span><span class="n">tail</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To check if an item exists, you add a <code>contains?</code> method:</p>

<figure class='code'><figcaption><span>&#8220;List with contains&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-list2-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">List</span>
</span><span class='line'>  <span class="c1"># ..</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">contains?</span><span class="p">(</span><span class="n">v</span><span class="p">);</span> <span class="kp">false</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ..</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Cons</span> <span class="o">&lt;</span> <span class="no">List</span>
</span><span class='line'>  <span class="c1"># ..</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">contains?</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="n">head</span> <span class="o">==</span> <span class="n">v</span> <span class="o">||</span> <span class="n">tail</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ..</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you write your immutable Set and matching tests:</p>

<figure class='code'><figcaption><span>&#8220;A dumb set implementation&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-set-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DumbSet</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">storage</span> <span class="o">=</span> <span class="no">Nil</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@storage</span> <span class="o">=</span> <span class="n">storage</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:storage</span>
</span><span class='line'>  <span class="kp">private</span>     <span class="ss">:storage</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">!</span><span class="n">storage</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>      <span class="no">DumbSet</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">storage</span><span class="o">.</span><span class="n">prepend</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">self</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:&lt;&lt;</span><span class="p">,</span> <span class="ss">:push</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">contains?</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="n">storage</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_a</span>
</span><span class='line'>    <span class="n">values</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">list</span>   <span class="o">=</span> <span class="n">storage</span>
</span><span class='line'>    <span class="k">until</span> <span class="n">list</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="n">values</span> <span class="o">&lt;&lt;</span> <span class="n">list</span><span class="o">.</span><span class="n">head</span>
</span><span class='line'>      <span class="n">list</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="n">tail</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">values</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DumbSetTest</span> <span class="o">&lt;</span> <span class="ss">Minitest</span><span class="p">:</span><span class="ss">:Test</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@s</span> <span class="o">=</span> <span class="p">(((</span><span class="no">DumbSet</span><span class="o">.</span><span class="n">new</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:s</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_contains</span>
</span><span class='line'>    <span class="n">assert</span> <span class="n">s</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span> <span class="n">s</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span> <span class="n">s</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span> <span class="o">!</span><span class="n">s</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_uniqueness</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[-</span><span class="mi">32</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="p">(</span><span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">32</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">32</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">32</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And because I spotted you writing new code and yelled &ldquo;HEY USE RANTLY IT&rsquo;S SO COOL YIPEE&rdquo;, you add some property tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DumbSetTest</span> <span class="o">&lt;</span> <span class="ss">Minitest</span><span class="p">:</span><span class="ss">:Test</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test_contains_property</span>
</span><span class='line'>    <span class="n">property</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">array</span><span class="p">(</span><span class="n">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span> <span class="p">{</span> <span class="n">integer</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">check</span> <span class="p">{</span> <span class="o">|</span><span class="n">vs</span><span class="o">|</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="n">vs</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">DumbSet</span><span class="o">.</span><span class="n">new</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">ds</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">ds</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">assert</span> <span class="n">vs</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_uniqueness_property</span>
</span><span class='line'>    <span class="n">property</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">array</span><span class="p">(</span><span class="n">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span> <span class="p">{</span> <span class="n">integer</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">check</span> <span class="p">{</span> <span class="o">|</span><span class="n">vs</span><span class="o">|</span>
</span><span class='line'>      <span class="n">ns</span> <span class="o">=</span> <span class="n">vs</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">DumbSet</span><span class="o">.</span><span class="n">new</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">ds</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">ds</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">rs</span> <span class="o">=</span> <span class="n">vs</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="n">ns</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">ds</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">ds</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">assert_equal</span> <span class="n">vs</span><span class="o">.</span><span class="n">sort</span><span class="p">,</span> <span class="n">ns</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It looks good:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">ruby</span> <span class="n">set_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="no">Run</span> <span class="ss">options</span><span class="p">:</span> <span class="o">--</span><span class="n">seed</span> <span class="mi">15625</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Running:</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="ss">success</span><span class="p">:</span> <span class="mi">100</span> <span class="n">tests</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="ss">success</span><span class="p">:</span> <span class="mi">100</span> <span class="n">tests</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">119717</span><span class="n">s</span><span class="p">,</span> <span class="mi">33</span><span class="o">.</span><span class="mi">4121</span> <span class="n">runs</span><span class="o">/</span><span class="n">s</span><span class="p">,</span> <span class="mi">1720</span><span class="o">.</span><span class="mi">7247</span> <span class="n">assertions</span><span class="o">/</span><span class="n">s</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">4</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">206</span> <span class="n">assertions</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span><span class="p">,</span> <span class="mi">0</span> <span class="n">errors</span><span class="p">,</span> <span class="mi">0</span> <span class="n">skips</span>
</span></code></pre></td></tr></table></div></figure>


<p>You then implement the removal of items:</p>

<figure class='code'><figcaption><span>&#8220;Set with delete&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-set-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DumbSet</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ls</span> <span class="o">=</span> <span class="n">storage</span>
</span><span class='line'>    <span class="n">ns</span> <span class="o">=</span> <span class="no">DumbSet</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="n">ls</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">ls</span><span class="o">.</span><span class="n">head</span> <span class="o">!=</span> <span class="n">v</span>
</span><span class='line'>        <span class="n">ns</span> <span class="o">=</span> <span class="n">ns</span> <span class="o">&lt;&lt;</span> <span class="n">v</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ls</span> <span class="o">=</span> <span class="n">ls</span><span class="o">.</span><span class="n">tail</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ns</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DumbSetTest</span> <span class="o">&lt;</span> <span class="ss">Minitest</span><span class="p">:</span><span class="ss">:TestCase</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_delete</span>
</span><span class='line'>    <span class="n">os</span> <span class="o">=</span> <span class="p">(((</span><span class="no">DumbSet</span><span class="o">.</span><span class="n">new</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ns</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">1337</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="n">ns</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>    <span class="n">ns</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="n">ns</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>    <span class="n">ns</span> <span class="o">=</span> <span class="n">ns</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">ns</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>    <span class="n">ns</span> <span class="o">=</span> <span class="p">(</span><span class="n">ns</span> <span class="o">&lt;&lt;</span> <span class="mi">432</span><span class="p">)</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[</span><span class="mi">432</span><span class="o">]</span><span class="p">,</span> <span class="n">ns</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>    <span class="n">ns</span> <span class="o">=</span> <span class="n">ns</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">432</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="o">[]</span><span class="p">,</span> <span class="n">ns</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your tests pass, but this time you don&rsquo;t listen to me about adding another property. You&rsquo;re just not that convinced they&rsquo;re worth their salt, and it looks good enough to ship with all the tests you&rsquo;ve added. The Pokémon Collecting app you work on can benefit from it right now, instead of 20 minutes from now. To production it goes.</p>

<p>Time goes by, and you&rsquo;ve forgotten about me and our little adventure. Your system is humming along and moved on to maintenance mode. Days have been kind of slow, so you decide to add an optimization you&rsquo;ve read about in Hacker News, detailing how a node.js program got a 10x speedup. You modify your delete method accordingly:</p>

<figure class='code'><figcaption><span>&#8220;Set Tests&#8221;</span><a href='https://gist.github.com/dodecaphonic/9934064#file-set_test-rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ls</span>  <span class="o">=</span> <span class="n">storage</span>
</span><span class='line'>    <span class="n">tmp</span> <span class="o">=</span> <span class="no">DumbSet</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="n">ls</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">ls</span><span class="o">.</span><span class="n">head</span> <span class="o">!=</span> <span class="n">v</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ls</span><span class="o">.</span><span class="n">head</span> <span class="o">&lt;</span> <span class="mi">1500</span><span class="p">)</span> <span class="c1"># secret performance trick</span>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp</span> <span class="o">&lt;&lt;</span> <span class="n">ls</span><span class="o">.</span><span class="n">head</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ls</span> <span class="o">=</span> <span class="n">ls</span><span class="o">.</span><span class="n">tail</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tmp</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>CI still reports all green.</p>

<p>A few days later, you receive a report from a User telling she deleted their Pokémon with power level 3, but her Pokémons with levels 4013, 1551 and 20000 disappeared. Your first line of defense &mdash; your tests &mdash; have not caught any issues. Sweating bullets and drowning in emails from stakeholders and other Pokémon fiends, you&rsquo;re about to collapse.</p>

<p>And then you remember: what about trying to express a property to see if it holds?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># We&#39;ll add at most 10 unique items and then delete the first</span>
</span><span class='line'>  <span class="c1"># 2. If there&#39;s anything wrong, this will blow up.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_delete_property</span>
</span><span class='line'>    <span class="n">property</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">array</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span> <span class="n">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5000</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">check</span> <span class="p">{</span> <span class="o">|</span><span class="n">values</span><span class="o">|</span>
</span><span class='line'>      <span class="n">os</span> <span class="o">=</span> <span class="n">values</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">DumbSet</span><span class="o">.</span><span class="n">new</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">ds</span> <span class="o">=</span> <span class="n">values</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="n">os</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">assert_equal</span> <span class="p">(</span><span class="n">values</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">2</span><span class="p">),</span> <span class="n">ds</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You run it and it explodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">ruby</span> <span class="n">set_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="no">Run</span> <span class="ss">options</span><span class="p">:</span> <span class="o">--</span><span class="n">seed</span> <span class="mi">46455</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Running:</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="ss">success</span><span class="p">:</span> <span class="mi">100</span> <span class="n">tests</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="ss">failure</span><span class="p">:</span> <span class="mi">0</span> <span class="n">tests</span><span class="p">,</span> <span class="ss">on</span><span class="p">:</span>
</span><span class='line'><span class="o">[</span><span class="mi">384</span><span class="p">,</span> <span class="mi">437</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">718</span><span class="p">,</span> <span class="mi">1850</span><span class="p">,</span> <span class="mi">4579</span><span class="p">,</span> <span class="mi">3178</span><span class="p">,</span> <span class="mi">4191</span><span class="p">,</span> <span class="mi">533</span><span class="p">,</span> <span class="mi">2669</span><span class="o">]</span>
</span><span class='line'><span class="n">F</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="ss">success</span><span class="p">:</span> <span class="mi">100</span> <span class="n">tests</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">093858</span><span class="n">s</span><span class="p">,</span> <span class="mi">63</span><span class="o">.</span><span class="mi">9264</span> <span class="n">runs</span><span class="o">/</span><span class="n">s</span><span class="p">,</span> <span class="mi">2248</span><span class="o">.</span><span class="mo">076</span><span class="mi">9</span> <span class="n">assertions</span><span class="o">/</span><span class="n">s</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">1</span><span class="p">)</span> <span class="ss">Failure</span><span class="p">:</span>
</span><span class='line'><span class="no">DumbSetTest</span><span class="c1">#test_delete_property [set_test.rb:69]:</span>
</span><span class='line'><span class="ss">Expected</span><span class="p">:</span> <span class="mi">8</span>
</span><span class='line'>  <span class="ss">Actual</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="mi">6</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">211</span> <span class="n">assertions</span><span class="p">,</span> <span class="mi">1</span> <span class="n">failures</span><span class="p">,</span> <span class="mi">0</span> <span class="n">errors</span><span class="p">,</span> <span class="mi">0</span> <span class="n">skips</span>
</span></code></pre></td></tr></table></div></figure>


<p>What? How come you&rsquo;ve only got 2 when you expected 8? Well, there must be something wrong with delete, after all. Let&rsquo;s take that array and try it on an <em>pry</em> session to see what happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="o">[</span><span class="mi">384</span><span class="p">,</span> <span class="mi">437</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">718</span><span class="p">,</span> <span class="mi">1850</span><span class="p">,</span> <span class="mi">4579</span><span class="p">,</span> <span class="mi">3178</span><span class="p">,</span> <span class="mi">4191</span><span class="p">,</span> <span class="mi">533</span><span class="p">,</span> <span class="mi">2669</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">384</span><span class="p">,</span> <span class="mi">437</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">718</span><span class="p">,</span> <span class="mi">1850</span><span class="p">,</span> <span class="mi">4579</span><span class="p">,</span> <span class="mi">3178</span><span class="p">,</span> <span class="mi">4191</span><span class="p">,</span> <span class="mi">533</span><span class="p">,</span> <span class="mi">2669</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">os</span> <span class="o">=</span> <span class="n">values</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="no">DumbSet</span><span class="o">.</span><span class="n">new</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">v</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;DumbSet...&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="n">os</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">718</span><span class="p">,</span> <span class="mi">533</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wait a minute! Should delete also remove everything that&rsquo;s over 1000-ish? Is there anything in the code that stipulates such a thing? Maybe that node.js optimization was not so great after all. Let&rsquo;s remove it and run the tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">ruby</span> <span class="n">set_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="no">Run</span> <span class="ss">options</span><span class="p">:</span> <span class="o">--</span><span class="n">seed</span> <span class="mi">2727</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Running:</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="ss">success</span><span class="p">:</span> <span class="mi">100</span> <span class="n">tests</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="ss">success</span><span class="p">:</span> <span class="mi">100</span> <span class="n">tests</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="ss">success</span><span class="p">:</span> <span class="mi">100</span> <span class="n">tests</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mi">099329</span><span class="n">s</span><span class="p">,</span> <span class="mi">60</span><span class="o">.</span><span class="mi">4053</span> <span class="n">runs</span><span class="o">/</span><span class="n">s</span><span class="p">,</span> <span class="mi">3120</span><span class="o">.</span><span class="mi">9415</span> <span class="n">assertions</span><span class="o">/</span><span class="n">s</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">6</span> <span class="n">runs</span><span class="p">,</span> <span class="mi">310</span> <span class="n">assertions</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span><span class="p">,</span> <span class="mi">0</span> <span class="n">errors</span><span class="p">,</span> <span class="mi">0</span> <span class="n">skips</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà: properties have saved the day, and you&rsquo;ve learned not to trust Hacker News bravado ever again.</p>

<h2>Is using Rantly the same as using QuickCheck or ScalaCheck?</h2>

<p>Sort of. For one, you have to write your own generators every time you want something other than basic types, while both QuickCheck and ScalaCheck can figure out a lot by themselves. This can make expressing what you mean a lot easier, and you don&rsquo;t spend time debugging your <code>property</code> blocks in search of mistakes. That said, writing a generator for your own types requires only that you instantiate them in the <code>property</code> blocks with other auto-generated values.</p>

<p>Shrinking is not as good in Rantly. It works ok a lot of the time, but it could be improved. On the surface, from skimming the algorithms used in ScalaCheck and Rantly, it doesn&rsquo;t <em>seem</em> that different, but over that side of the line the patterns in minimization seem easier to spot.</p>

<p>There&rsquo;s also no mechanism to test stateful code. ScalaCheck has <a href="https://github.com/rickynils/scalacheck/wiki/User-Guide#stateful-testing">Commands</a> to help in modeling state changes, and I&rsquo;m aware <a href="https://github.com/manopapad/proper">PropEr</a> and <a href="http://www.quviq.com/">QuickCheck for Erlang</a> also provide something in that direction.</p>

<p>One minor thing is that integration with RSpec and MiniTest could be improved. Its output pollutes the test run, and on large suites it becomes hard to know the relationship between a failed property and a failed test. It should be easy to fix for anyone motivated. On that note, there&rsquo;s no ready-made extension for MiniTest (although adding one is trivial enough that I&rsquo;m sending a PR to fix it).</p>

<h2>Final considerations</h2>

<p>I hope I have proven, even if with a craptastic example, that property-testing can aid you in writing better Ruby code. Our community is great when it comes to using tests both as a design and as a verification tool, and QuickCheck (via Rantly) is a new way of thinking about them. You should keep your TDD/BDD to carve out your objects and responsibilities, but also add property checks where suitable to strengthen your confidence in the system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(PT-BR) Palestra sobre Celluloid no RubyOnRio]]></title>
    <link href="http://troikatech.com/blog/2014/03/21/pt-br-palestra-sobre-celluloid-no-rubyonrio/"/>
    <updated>2014-03-21T16:10:00-03:00</updated>
    <id>http://troikatech.com/blog/2014/03/21/pt-br-palestra-sobre-celluloid-no-rubyonrio</id>
    <content type="html"><![CDATA[<p>No dia 15 de março de 2014, aproveitei o encontro do <a href="http://rubyonrio.org">RubyOnRio</a> para falar sobre <a href="https://github.com/celluloid/celluloid">Celluloid</a>, uma implementação do Actor Model para Ruby. Como programação reativa, concorrência, paralelismo e quetais têm ocupado minha mente nos últimos meses, achei por bem conversar com o pessoal sobre como isso é relevante para o futuro do desenvolvimento de software e para o Ruby em si, constantemente sob ameaça (se Hacker News for parâmetro) de ser soterrado por uma tecnologia mais antenada com os novos tempos.</p>

<script async class="speakerdeck-embed" data-id="7acca2a0935901315c4a3abe98d15494" data-ratio="1.34031413612565" src="http://troikatech.com//speakerdeck.com/assets/embed.js"></script>


<p>A ideia da minha apresentação foi dar uma pincelada nos problemas clássicos de threading, explicar <em>en passant</em> as ideias do Actor Model, e por fim encerrar na aplicação disso dentro do Celluloid. Claro que há informações vitais que ficaram de fora, que a superficialidade pode ser criticada, que o palestrante é meio capenga, mas espero que no cômputo geral o resultado tenha agradado.</p>

<iframe width="560" height="315" src="http://troikatech.com//www.youtube.com/embed/0t0BlDdWQQY" frameborder="0" allowfullscreen></iframe>


<iframe width="560" height="315" src="http://troikatech.com//www.youtube.com/embed/_y6KbkqklkQ" frameborder="0" allowfullscreen></iframe>


<p>Por fim apresentei um projetinho que fiz especialmente para o encontro, o <a href="https://github.com/dodecaphonic/balladina-ruby">Balladina</a>. Foi divertido fazê-lo, e aprendi bastante coisa sobre o Celluloid no processo. Pude também contrastar algumas coisas com a parca experiência que tive com o Akka no <a href="http://troikatech.com/blog/2014/01/12/reactive/">curso do Coursera</a>, e a maturidade do Celluloid relativa à do Akka me deixou esperançoso de um futuro bacana no Ruby. Vamos torcer pelo melhor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebSockets in Ruby]]></title>
    <link href="http://troikatech.com/blog/2014/02/26/websocket-webmachine/"/>
    <updated>2014-02-26T09:03:00-03:00</updated>
    <id>http://troikatech.com/blog/2014/02/26/websocket-webmachine</id>
    <content type="html"><![CDATA[<p>At my main job, we have a large datastructure that takes considerable CPU time to be built, but remains unchanged thereafter. Its job is to geocode positions to and from a local reference system, which in turn provides us the ability to pin records, for instance, to a place on a Road, and know to which coordinate pair a local reference would correspond.</p>

<p>For the first pass, I built the Ruby library for the geocoding and a simple (Sinatra-based) webservice. This worked fine for a while until the Client required that <strong>every</strong> mouse move performed a conversion. Said change, prompted me to build the same geocoding infrastructure again in JavaScript, and all were happy for a while.</p>

<p>As it usually goes, a new decision was made to support multiple Roads per User. Now, a download of 800KB of data (stored in an IndexedDB for later sessions) was tolerable; potentially multiple megabytes would be deadly, even if the software could be used before that constant feedback of conversions was given &mdash; it just became one of those features Users hold on to.</p>

<p>I knew that we had to go for a solution that kept that intact and made the whole thing manageable. I had dabbled in WebSockets before (with <a href="http://nodejs.org">node.js</a> and <a href="http://socket.io/">Socket.IO</a>) and kind of knew the lay of the land. Still, from previous searches, I was also aware there was a dearth of Ruby solutions, and for a moment considered going with my JavaScript port on node. The thought gave me shivers.</p>

<h2>The contenders</h2>

<p>The first step was finding out what could be used. This is what I evaluated:</p>

<ul>
<li><a href="https://github.com/simulacre/sinatra-websocket">sinatra-websocket</a></li>
<li><a href="https://github.com/faye/faye-websocket-ruby">faye-websocket</a></li>
<li><a href="https://github.com/websocket-rails/websocket-rails">websocket-rails</a></li>
<li><a href="https://github.com/ngauthier/tubesock">tubesock</a></li>
<li><a href="https://github.com/seancribbs/webmachine-ruby">webmachine-ruby</a></li>
</ul>


<p>The first three are EventMachine-based; <em>tubesock</em> uses <a href="http://blog.phusion.nl/2013/01/23/the-new-rack-socket-hijacking-api/">rack hijacking</a>; <em>webmachine-ruby</em> provides WebSockets via <a href="https://github.com/celluloid/reel">Reel</a>, a Celluloid::IO-based HTTP server.</p>

<p>At first, considering I was already using Sinatra, I tried <em>sinatra-websocket</em>. For some reason I just couldn&rsquo;t get the connection to be upgraded to a WebSocket, and decided to move on quickly. <em>faye-websocket</em> I just skipped, to be frank.</p>

<p>The next two suffered from the same problem: after booting Rails and loading the structure, I was left with only enough memory for a couple dozen or so clients on a small Heroku dyno. Also, Rails&#8217; boot time coupled with building the thing occasionally made Heroku think something had gone wrong, and often the process crashed before the service went up.</p>

<p>The only one left, if you&rsquo;re counting, was <em>webmachine-ruby</em>.</p>

<h2>webmachine-ruby</h2>

<p>Setting up was relatively easy. To ramp up, I first migrated the original HTTP-based service to its resource structure. It has more of an OO flair than both Rails and Sinatra, with the caveat that it provides a lot less (by design). The dispatcher is easy to understand, and I quite enjoyed toying with the <a href="https://github.com/seancribbs/webmachine-ruby#visual-debugger">visual debugger</a>.</p>

<p>Moving to a WebSocket, however, changes everything. As far as I can tell (and the documentation specifies) you completely skip over the regular infrastructure by providing a <em>callable</em> to a configuration option, as such:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>App = Webmachine::Application do |app|
</span><span class='line'>  app.configure do |config|
</span><span class='line'>    config.adapter = :Reel
</span><span class='line'>    config.adapter_options[:websocket_handler] = proc do |websocket|
</span><span class='line'>      websocket &lt;&lt; "hello, world"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>That is pretty much what the docs say. Since it only expects the handler to respond to <em>#call</em>, you can write your own <em>ad-hoc</em> dispatcher:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class WebsocketHandler
</span><span class='line'>  def call(websocket)
</span><span class='line'>    message = websocket.read
</span><span class='line'>    # do something with the message, call methods on other objects, log stuff, have your fun
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>What the docs don&rsquo;t address are some basics of sockets programming. If you see your handler hang and never respond again, requiring you to restart, don&rsquo;t fret: you just have to provide a loop to read from the the socket and let Celluloid::IO do its non-blocking magic:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class WebsocketHandler
</span><span class='line'>  def call(websocket)
</span><span class='line'>    loop do
</span><span class='line'>      message = websocket.read
</span><span class='line'>      # do something with the message, call methods on other objects, log stuff, have your fun
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t worry: your CPU won&rsquo;t be pegged at 100%, because non-blocking. You&rsquo;ll be subjected, however, to the same limitations node has regarding CPU usage and its event handlers (i.e. if you are CPU-intensive, you&rsquo;ll affect throughput).</p>

<p>Luckily, we have threads in Ruby. I decided to take advantage of that by assigning each client to a Celluloid Actor, which allows me to provide some of the CPU-intensive operations without compromising (at least not heavily) other Users. It has been working fine so far.</p>

<h2>What&rsquo;s missing</h2>

<p>My solution doesn&rsquo;t take into account non-WebSocket clients, but it should. <em>webmachine-ruby</em> makes it easy by allowing you to implement streaming APIs without much trouble, and I suppose it&rsquo;ll only take a bit of JS to fallback from one to the other and provide an abstract connection to consumers.</p>

<p>The documentation also doesn&rsquo;t go over all the events that can happen on the socket (<em>onerror</em>, <em>onclose</em>, <em>onopen</em>, <em>onmessage</em>). You can see them as methods on the socket, each taking a block, but for my use case I just let the actor crash and be done with it. If I&rsquo;m missing some cleanup, please let me know.</p>

<p>This architecture also doesn&rsquo;t provide a ready-baked pub/sub system, with channels and message brokers. If that&rsquo;s more in the spirit of what you need, check out <a href="http://faye.jcoglan.com/">faye</a> and <a href="https://github.com/websocket-rails/websocket-rails">websocket-rails</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Principles of Reactive Programming", a review]]></title>
    <link href="http://troikatech.com/blog/2014/01/12/reactive/"/>
    <updated>2014-01-12T13:15:00-02:00</updated>
    <id>http://troikatech.com/blog/2014/01/12/reactive</id>
    <content type="html"><![CDATA[<p>After the positive experience learning some Scala and some functional patterns in <a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a>, I was excited to undertake the new course from Martin Odersky and co. The fact that it would pick up from where it left off and build on the <a href="http://www.reactivemanifesto.org/">Reactive brouhaha</a> was icing in the cake; after all, the techniques and technologies approached in the lectures highlight some of what Scala does best.</p>

<h2>Structure</h2>

<p>It starts with mr. Odersky&rsquo;s already familiar style, reviewing some of what was taught in the previous course and expanding on some topics. The dreaded Monads were dealt with, and while I can&rsquo;t talk about the subject from a theoretical standpoint or offer a perfect explanation, I feel I grasp how they can be used to compose behavior and express functionality better.</p>

<p>The second part was the highlight, for me. Erik Meijer (from LINQ and Reactive Extensions fame on the .NET land) has an incredibly upbeat energy and great sense of humor, which carry you like a breeze through the amazing concepts he expresses. I loved thinking about Event streams and how to compose them using monadic combinators in the form of <code>Observables</code> (alongside <code>Subscriptions</code>, <code>Schedulers</code>, <code>Promises</code> and <code>Futures</code>). I think this affected me the most, for I could clearly see how to mix and match things to add behavior.</p>

<p>The third part was also very good. Roland Kuhn (Akka&rsquo;s tech lead) has a soft-spoken style that relaxes you while he lays the groundwork over which you&rsquo;ll learn about Actors, building distributed systems and dealing with failure in that model. He also shows piece by piece what <a href="http://akka.io">Akka</a> can do (which led me to explore more of <a href="https://github.com/celluloid/celluloid">Celluloid</a>, a topic for a future post).</p>

<h2>Exercises</h2>

<p>Everything comes together with each week&rsquo;s exercises. The first was a quick-and-simple one that explores <a href="http://www.scalacheck.org/">property testing</a>. I went through it quickly, but I still find it hard to apply that mode of thinking, and didn&rsquo;t get much out of the technique later on. I know this is a personal limitation, as some people in the course forums mentioned using it to great effect.</p>

<p>After that, you get a wake-up call that this is gonna require some hard work right as you&rsquo;re asked to build two simulations: one of circuits, with emphasis on building a demultiplexer, and one of an epidemy. The fact that this involves timing and sequencing makes you think about state and purely functional programs. Building something substantial (and fun to watch) gives you an appreciation of their usefulness.</p>

<p><img src="http://dl.dropboxusercontent.com/s/ml6pp98zwfufbob/2014-01-12%20at%2014.52.png" alt="Epidemy simulation" /></p>

<p>Erik Meijer&rsquo;s had cool, practical examples: you build a node-style web server (with a Reactor loop) in the first week and a Wikipedia Swing client using reactive streams for GUI events and networking in the second. It makes you want to write everything in this style, because it becomes much easier to think about <em>what</em> happens <em>when</em> with <em>whom</em>.</p>

<p>The third section, on Akka, takes the prize in this area: first you redo the binary search tree exercise from the first course using Actors, which I found a great idea, as you&rsquo;re confronted just with the new concepts. Then you are challenged into building a (simplified) distributed key-value store, including replication and joining of new nodes. Describing this exercise to colleagues made them want to take the course. I hope they do.</p>

<h2>Scala</h2>

<p>Being forced to use more Scala made my interest in it grow more and more. <a href="https://al3x.net/">Alex Payne</a> has said that it feels a bit like Ruby in its expressiveness, and I got that while building the exercises. I confess it is refreshing and enlightening to use types as a way of reasoning, and not as something that just soothes a compiler with a frail ego.</p>

<p>On the other hand, tooling was problematic. Being an Emacs user, I try to keep in it at all times, and surprisingly (coupled with <a href="https://github.com/aemoncannon/ensime">ENSIME</a>) the experience was not bad. Still I tried to take the opportunity to learn a little bit more about what is offered and how well it works, and the experience was not so great. Importing the provided Eclipse projects sometimes resulted in missing dependencies; importing the sbt project in IntelliJ IDEA resulted in error messages complaining about the TEST context, which some of the students claimed could be solved with nightly builds of its Scala and SBT plugins.</p>

<p>In ENSIME it mostly worked fine. Sometimes I needed to run the tests before generating the project in <code>sbt</code>, or to regenerate the project as I fleshed out the code. This was not that that awful, in the end: coming from a world of no static types, no code completion, poor navigation (seriously, guys, I&rsquo;ve used dynamic languages for over 15 years, and grep/ack/ag is not a good replacement) and pretty crude automatic refactorings, it felt like I was thrown into a better world. I find myself missing it in my daily Ruby dealings.</p>

<p><img src="http://dl.dropboxusercontent.com/s/c0ce5j0jlknn90r/2014-01-12%20at%2014.47.png" alt="ENSIME as I worked through the exercises" /></p>

<p>I realize the situation with Eclipse and IntelliJ may be specific to the course, as the canonical thing to use was sbt. However, being that sbt is the canonical build tool, period, it made the experience messy, and complaints in the forum suggest there&rsquo;s still a lot to improve here. We developers are used these sorts of hurdles (and, let&rsquo;s be frank, to learning workarounds), but this is the type of thing that turns off someone that is not yet invested in the tech.</p>

<h2>What I learned about myself</h2>

<p>Comparing my approach to my fellow students&#8217;, I found I could go through most things relatively easily, based on experience alone, but that eventually I had to exercise muscles in areas I consider mostly weak: self-reliance and grit. It was necessary to overcome my impulse to procrastinate when facing a roadblock, and also to not feel guilty about going to the forums, reading about other people&rsquo;s struggles or using a test suite that some kind soul provided for everyone else.</p>

<p>To face things that are known but empirically unexplored made me question my ability, and demanded a hard look at my self-image. It took great care and some pain to keep motivated and think of the outcome. The sense of pride from having completed this without delaying a single exercise makes me believe I can accomplish more. Furthermore, getting a near-perfect score for the effort is very sweet.</p>

<p>I hope this helps me become a little more patient. My instinct is to go for quick intellectual gratification, for tight feedback loops, and that is not always possible (or even desirable). Standing on the shoulder of giants requires a climb; I must remember not be discouraged after the first stretch.</p>

<h2>Conclusion</h2>

<p>I recommend everyone to go through this course. It is challenging, rewarding and (for me) a good source of personal growth. Scala is very interesting, and worthy of your time, and Akka is incredible. I found the different teaching styles refreshing, a great way to keep the learner engaged. All in all, a delightful experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["REMOTE", by 37signals &mdash; &#9733;&#9733;&#9734;&#9734;&#9734;]]></title>
    <link href="http://troikatech.com/blog/2013/11/15/rework/"/>
    <updated>2013-11-15T11:52:00-02:00</updated>
    <id>http://troikatech.com/blog/2013/11/15/rework</id>
    <content type="html"><![CDATA[<p><a href="http://37signals.com/remote/">
<img class="left" src="http://37signals.com/images/remote/remote_front.png" width="400" height="600" title="'REMOTE - by Jason Fried and DHH'" >
</a></p>

<p>As a remote worker myself, I nodded my head frequently at the advantages and challenges presented, so the rating&rsquo;s not about a fundamental disagreement with the message or the intentions. Like the authors, I know from personal experience that commuting, facing a strict set of working hours, interruptions and living with the expectation of availability from others are some of the greatest dangers to productive work (creative work especially).</p>

<p>I did, however, expect more than short chapters and sparse data points. Maybe it&rsquo;s the programmer in me misunderstanding the whole &ldquo;business book&rdquo; thing, but perhaps the arguments would hold more weight if they were more than anedoctal. They render the whole thing as an account of what works for 37signals &mdash; a very small and relatively unknown company in the greater scheme of things. I understand that relying on managers and employers to be swayed by arguments from authority is antithetical to the book (the thesis being that remote work is a <em>rationally</em> better decision overall), but we cannot underestimate how many small-to-medium companies manage by emulation. Maybe stronger data and clearer research could counter gut reactions better.</p>

<p>I think this might be good if you need just a little push to go after this, if you&rsquo;re a bit on the fence and already considering/thinking this is a trend that should be studied and followed. If you want something to challenge your views with great insights, don&rsquo;t bother: it&rsquo;s fluffy and humane and beautifully illustrated, but you&rsquo;re probably going to leave the book mostly unchallenged.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You broke the build!]]></title>
    <link href="http://troikatech.com/blog/2013/10/12/you-broke-the-build/"/>
    <updated>2013-10-12T18:24:00-03:00</updated>
    <id>http://troikatech.com/blog/2013/10/12/you-broke-the-build</id>
    <content type="html"><![CDATA[<p>A coworker and I share rank as managers of a small team of Rails developers, an oddity created by a brief stint I had working for another company and then coming back. I used to be his manager, but when I returned my role was constrained to the technical side of things, while he took over caring for the team and client relations. It is an arrangement that suits me better, to be frank, as it lets me focus on what I do best.</p>

<p>Both of us still work on code. Our approaches differ both because of our relative gaps in experience (I&rsquo;ve worked on more projects, and with Ruby specifically for a lot longer) and our personalities. The last point does not generate contention per se, but leads to clearly different stances when it comes to quality in our work: my ultimate goal is that everyone folds their branches back to <code>master</code> with tests and properly factored code; he knows tests are a force for good, but often lets them slide for different reasons.</p>

<p>Recently we&rsquo;ve discussed this and the effects it has on the rest of the team. One of the junior developers has become completely test-averse, carelessly breaking parts of the suite and shrugging it off. While I have called attention to many instances of the thing, the separation of responsibilities means it&rsquo;s up to him to make changes to the process and accountability, which he vowed to do.</p>

<p>That is, until he merged a branch he worked on for almost two months, clearly never running the tests, and broke the build.</p>

<h3>Why am I so angry?</h3>

<p>My frustration skyrocketed when I got the notification from the CI server (and many others from <a href="https://codeclimate.com/">Code Climate</a> about the decline in quality, but that&rsquo;s a subject for another post). It took me a few minutes to regain my composure, get the code, confirm <strong>NO TESTS</strong> were running, and write to him that the build was badly broken. He retorted with an excuse that surely made a lot of sense to him (&ldquo;I needed to share some code with the junior dev&rdquo;), but only got me more pissed. It was 10pm on a Friday night, and I decided to let it go.</p>

<p>The whole thing left a bad taste in my mouth, though. The experience I had at the other company was terrifying precisely because a mission-critical Rails app went up without a single test, resulting in very long working hours and awful bugs in production &mdash; all in a culture that eschewed personal responsibility and poo-pooed the thought of having a <em>process</em>. Maybe I&rsquo;ve been burnt a lot more than the young guns working with me now, but I just know it will bite us down the road, and that it will result in dissatisfied customers, long nights and me not even having the energy to say &ldquo;I told you so&rdquo;. For now he can say our code isn&rsquo;t in production. But it isn&rsquo;t YET.</p>

<p>That, in the end, is what makes me angry. That otherwise intelligent people can&rsquo;t see that they&rsquo;re gonna pay tenfold for the cost they are avoiding now by not learning and following best practices, and that testing, while certainly not flawless, helps you sleep peacefully knowing that the code you changed didn&rsquo;t break anything in the suite and the build.</p>

<h3>How can I make it better?</h3>

<p>I&rsquo;m not yet sure. I&rsquo;m often afraid that it hinges on a personal commitment to learning and improving your craft. Other times, though, I wonder if it isn&rsquo;t just an absence of mentors who are patient and didactic enough to sit beside someone that isn&rsquo;t convinced and work him or her through it, and of company cultures that accept that the time it takes to make things better is not money wasted.</p>

<p>It doesn&rsquo;t help that a lot of people still don&rsquo;t know the first thing about things you and I take for granted. Most of them think <em>&ldquo;Refactoring&rdquo;</em> is a menu on their IDEs, or empty jargon to use when code needs some TLC. Forgive them, <a href="http://www.refactoring.com/">father Fowler</a>, for they do not know what they are doing. Basic concepts may have to be more evenly spread before we can talk about building the next step.</p>

<p>One thing I can personally improve is on communicating clearly to my teammates and people close to me is that I care about these practices, making it clear that my interlocutor is not expected to know everything about it (I certainly don&rsquo;t). I also have to understand it may be an unwelcome message at times, and that I should just take the time it needs.</p>

<h3>Final thoughts</h3>

<p>It&rsquo;s hard to not cry foul when people don&rsquo;t do what they say they&rsquo;re going to. The situation that triggered this logorrhea, now that it&rsquo;s through, must be assessed not as some act of malice, but simply as the disconnect between discourse and what is perceived to be a pressing matter. And to be fair, this particular instance had a happy ending: after my frustrated emails, the dude went back and made things right with the code and the build is bright green. Hopefully it will be ok to talk about it openly as both the wrong and the right thing to do, and prove compelling enough for the junior devs and other coworkers to feel engaged.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Momentum, this ineffable thing]]></title>
    <link href="http://troikatech.com/blog/2013/09/05/momentum-this-ineffable-thing/"/>
    <updated>2013-09-05T23:41:00-03:00</updated>
    <id>http://troikatech.com/blog/2013/09/05/momentum-this-ineffable-thing</id>
    <content type="html"><![CDATA[<p>Revisiting the book, it has surprised me to find a lot of the ideas familiar, some of them even mundane. Since trying it the last (three years ago? four?), I have delved a bit into functional programming via Scala (I did <a href="https://www.coursera.org/course/progfun">Martin Odersky&rsquo;s &ldquo;Functional Programming Principles in Scala&rdquo;</a> last semester) and Clojure, and the things I learned in <a href="http://mitpress.mit.edu/books/little-schemer">The Little Schemer</a> weren&rsquo;t all forgotten. The substitution model, for one, feels very natural, and recursion is not that difficult to reason about.</p>

<p>What I&rsquo;m doing differently this time is following along with the <a href="http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/">1986 lectures</a>, which at least one person in every SICP-related Reddit/HN thread has recommended (and I ignored). I usually prefer learning from books and documentation, but the lectures have the benefit of requiring focus and monotasking. Also, listening to the audience&rsquo;s questions makes me a bit more aware of what is hard for a person with the Math background but not the programming skills &mdash; the exact opposite of my situation, and a great aid in keeping things in perspective.</p>

<p>As predicted, said Math-heaviness still makes me a little bit uncomfortable, but I&rsquo;m soldiering through. That means stopping at an exercise, reading Wikipedia and sometimes just taking things at face-value, as I don&rsquo;t have the intuitions someone more familiar with the subject matter would. It takes some patience, sometimes, and I would be lying if I told you it doesn&rsquo;t discourage me a bit.</p>

<p>That said, Chapter 1 is done. Now on to Chapter 2. Wish me luck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting things done... eventually.]]></title>
    <link href="http://troikatech.com/blog/2013/08/14/getting-things-done-dot-dot-dot-eventually-dot/"/>
    <updated>2013-08-14T21:02:00-03:00</updated>
    <id>http://troikatech.com/blog/2013/08/14/getting-things-done-dot-dot-dot-eventually-dot</id>
    <content type="html"><![CDATA[<p>As I review my to-do list, there it is: &ldquo;Read SICP and do its exercises&rdquo;. That note has been there for six years, moving from productivity tool to productivity tool, never getting done. It&rsquo;s been a <em>Project</em>, a <em>Someday</em>, in <em>Inbox</em> and even in <em>Trash</em>, in fits of rage. Sometimes I think I change my to-do software just to find one that magically will make it actionable.</p>

<p>The truth is the book scares me. Reading it puts me face-to-face with my incipient Math skills, and the thought of overcoming them brings about the fear of not going through any transformations, to still be beneath the nice and impressive people I follow on Twitter and star on GitHub. Looming doom is baked into my personality, and maturity hasn&rsquo;t made me get <em>Goals</em> or appreciate what I&rsquo;ve accomplished.</p>

<p>I&rsquo;m turning 30 in less than two months, and the failure is following me into a new decade. As weak as symbolic dates and its resolutions are as motivators, I really want to tick that box in the not-so-distant future. This blog will be a tale of a confused man walking through the land of Scheme, occasionally going off-topic, but always using the book as its main thread. I hope it&rsquo;s not too boring.</p>
]]></content>
  </entry>
  
</feed>
