<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: celluloid | Troika Tech]]></title>
  <link href="http://troikatech.com/blog/categories/celluloid/atom.xml" rel="self"/>
  <link href="http://troikatech.com/"/>
  <updated>2014-04-02T10:43:35-03:00</updated>
  <id>http://troikatech.com/</id>
  <author>
    <name><![CDATA[Vitor Capela]]></name>
    <email><![CDATA[dodecaphonic@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(PT-BR) Palestra sobre Celluloid no RubyOnRio]]></title>
    <link href="http://troikatech.com/blog/2014/03/21/pt-br-palestra-sobre-celluloid-no-rubyonrio/"/>
    <updated>2014-03-21T16:10:00-03:00</updated>
    <id>http://troikatech.com/blog/2014/03/21/pt-br-palestra-sobre-celluloid-no-rubyonrio</id>
    <content type="html"><![CDATA[<p>No dia 15 de março de 2014, aproveitei o encontro do <a href="http://rubyonrio.org">RubyOnRio</a> para falar sobre <a href="https://github.com/celluloid/celluloid">Celluloid</a>, uma implementação do Actor Model para Ruby. Como programação reativa, concorrência, paralelismo e quetais têm ocupado minha mente nos últimos meses, achei por bem conversar com o pessoal sobre como isso é relevante para o futuro do desenvolvimento de software e para o Ruby em si, constantemente sob ameaça (se Hacker News for parâmetro) de ser soterrado por uma tecnologia mais antenada com os novos tempos.</p>

<script async class="speakerdeck-embed" data-id="7acca2a0935901315c4a3abe98d15494" data-ratio="1.34031413612565" src="http://troikatech.com//speakerdeck.com/assets/embed.js"></script>


<p>A ideia da minha apresentação foi dar uma pincelada nos problemas clássicos de threading, explicar <em>en passant</em> as ideias do Actor Model, e por fim encerrar na aplicação disso dentro do Celluloid. Claro que há informações vitais que ficaram de fora, que a superficialidade pode ser criticada, que o palestrante é meio capenga, mas espero que no cômputo geral o resultado tenha agradado.</p>

<iframe width="560" height="315" src="http://troikatech.com//www.youtube.com/embed/0t0BlDdWQQY" frameborder="0" allowfullscreen></iframe>


<iframe width="560" height="315" src="http://troikatech.com//www.youtube.com/embed/_y6KbkqklkQ" frameborder="0" allowfullscreen></iframe>


<p>Por fim apresentei um projetinho que fiz especialmente para o encontro, o <a href="https://github.com/dodecaphonic/balladina-ruby">Balladina</a>. Foi divertido fazê-lo, e aprendi bastante coisa sobre o Celluloid no processo. Pude também contrastar algumas coisas com a parca experiência que tive com o Akka no <a href="/blog/2014/01/12/reactive/">curso do Coursera</a>, e a maturidade do Celluloid relativa à do Akka me deixou esperançoso de um futuro bacana no Ruby. Vamos torcer pelo melhor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebSockets in Ruby]]></title>
    <link href="http://troikatech.com/blog/2014/02/26/websocket-webmachine/"/>
    <updated>2014-02-26T09:03:00-03:00</updated>
    <id>http://troikatech.com/blog/2014/02/26/websocket-webmachine</id>
    <content type="html"><![CDATA[<p>At my main job, we have a large datastructure that takes considerable CPU time to be built, but remains unchanged thereafter. Its job is to geocode positions to and from a local reference system, which in turn provides us the ability to pin records, for instance, to a place on a Road, and know to which coordinate pair a local reference would correspond.</p>

<p>For the first pass, I built the Ruby library for the geocoding and a simple (Sinatra-based) webservice. This worked fine for a while until the Client required that <strong>every</strong> mouse move performed a conversion. Said change, prompted me to build the same geocoding infrastructure again in JavaScript, and all were happy for a while.</p>

<p>As it usually goes, a new decision was made to support multiple Roads per User. Now, a download of 800KB of data (stored in an IndexedDB for later sessions) was tolerable; potentially multiple megabytes would be deadly, even if the software could be used before that constant feedback of conversions was given &mdash; it just became one of those features Users hold on to.</p>

<p>I knew that we had to go for a solution that kept that intact and made the whole thing manageable. I had dabbled in WebSockets before (with <a href="http://nodejs.org">node.js</a> and <a href="http://socket.io/">Socket.IO</a>) and kind of knew the lay of the land. Still, from previous searches, I was also aware there was a dearth of Ruby solutions, and for a moment considered going with my JavaScript port on node. The thought gave me shivers.</p>

<h2>The contenders</h2>

<p>The first step was finding out what could be used. This is what I evaluated:</p>

<ul>
<li><a href="https://github.com/simulacre/sinatra-websocket">sinatra-websocket</a></li>
<li><a href="https://github.com/faye/faye-websocket-ruby">faye-websocket</a></li>
<li><a href="https://github.com/websocket-rails/websocket-rails">websocket-rails</a></li>
<li><a href="https://github.com/ngauthier/tubesock">tubesock</a></li>
<li><a href="https://github.com/seancribbs/webmachine-ruby">webmachine-ruby</a></li>
</ul>


<p>The first three are EventMachine-based; <em>tubesock</em> uses <a href="http://blog.phusion.nl/2013/01/23/the-new-rack-socket-hijacking-api/">rack hijacking</a>; <em>webmachine-ruby</em> provides WebSockets via <a href="https://github.com/celluloid/reel">Reel</a>, a Celluloid::IO-based HTTP server.</p>

<p>At first, considering I was already using Sinatra, I tried <em>sinatra-websocket</em>. For some reason I just couldn&rsquo;t get the connection to be upgraded to a WebSocket, and decided to move on quickly. <em>faye-websocket</em> I just skipped, to be frank.</p>

<p>The next two suffered from the same problem: after booting Rails and loading the structure, I was left with only enough memory for a couple dozen or so clients on a small Heroku dyno. Also, Rails' boot time coupled with building the thing occasionally made Heroku think something had gone wrong, and often the process crashed before the service went up.</p>

<p>The only one left, if you&rsquo;re counting, was <em>webmachine-ruby</em>.</p>

<h2>webmachine-ruby</h2>

<p>Setting up was relatively easy. To ramp up, I first migrated the original HTTP-based service to its resource structure. It has more of an OO flair than both Rails and Sinatra, with the caveat that it provides a lot less (by design). The dispatcher is easy to understand, and I quite enjoyed toying with the <a href="https://github.com/seancribbs/webmachine-ruby#visual-debugger">visual debugger</a>.</p>

<p>Moving to a WebSocket, however, changes everything. As far as I can tell (and the documentation specifies) you completely skip over the regular infrastructure by providing a <em>callable</em> to a configuration option, as such:</p>

<p>```
App = Webmachine::Application do |app|
  app.configure do |config|</p>

<pre><code>config.adapter = :Reel
config.adapter_options[:websocket_handler] = proc do |websocket|
  websocket &lt;&lt; "hello, world"
end
</code></pre>

<p>  end
end
```</p>

<p>That is pretty much what the docs say. Since it only expects the handler to respond to <em>#call</em>, you can write your own <em>ad-hoc</em> dispatcher:</p>

<p>```
class WebsocketHandler
  def call(websocket)</p>

<pre><code>message = websocket.read
# do something with the message, call methods on other objects, log stuff, have your fun
</code></pre>

<p>  end
end
```</p>

<p>What the docs don&rsquo;t address are some basics of sockets programming. If you see your handler hang and never respond again, requiring you to restart, don&rsquo;t fret: you just have to provide a loop to read from the the socket and let Celluloid::IO do its non-blocking magic:</p>

<p>```
class WebsocketHandler
  def call(websocket)</p>

<pre><code>loop do
  message = websocket.read
  # do something with the message, call methods on other objects, log stuff, have your fun
end
</code></pre>

<p>  end
end
```</p>

<p>Don&rsquo;t worry: your CPU won&rsquo;t be pegged at 100%, because non-blocking. You&rsquo;ll be subjected, however, to the same limitations node has regarding CPU usage and its event handlers (i.e. if you are CPU-intensive, you&rsquo;ll affect throughput).</p>

<p>Luckily, we have threads in Ruby. I decided to take advantage of that by assigning each client to a Celluloid Actor, which allows me to provide some of the CPU-intensive operations without compromising (at least not heavily) other Users. It has been working fine so far.</p>

<h2>What&rsquo;s missing</h2>

<p>My solution doesn&rsquo;t take into account non-WebSocket clients, but it should. <em>webmachine-ruby</em> makes it easy by allowing you to implement streaming APIs without much trouble, and I suppose it&rsquo;ll only take a bit of JS to fallback from one to the other and provide an abstract connection to consumers.</p>

<p>The documentation also doesn&rsquo;t go over all the events that can happen on the socket (<em>onerror</em>, <em>onclose</em>, <em>onopen</em>, <em>onmessage</em>). You can see them as methods on the socket, each taking a block, but for my use case I just let the actor crash and be done with it. If I&rsquo;m missing some cleanup, please let me know.</p>

<p>This architecture also doesn&rsquo;t provide a ready-baked pub/sub system, with channels and message brokers. If that&rsquo;s more in the spirit of what you need, check out <a href="http://faye.jcoglan.com/">faye</a> and <a href="https://github.com/websocket-rails/websocket-rails">websocket-rails</a>.</p>
]]></content>
  </entry>
  
</feed>
