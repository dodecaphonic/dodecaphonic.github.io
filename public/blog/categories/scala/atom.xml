<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | Troika Tech]]></title>
  <link href="http://troikatech.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://troikatech.com/"/>
  <updated>2014-04-02T11:53:12-03:00</updated>
  <id>http://troikatech.com/</id>
  <author>
    <name><![CDATA[Vitor Capela]]></name>
    <email><![CDATA[dodecaphonic@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Property-based testing in Ruby]]></title>
    <link href="http://troikatech.com/blog/2014/04/02/property-based-testing-in-ruby/"/>
    <updated>2014-04-02T10:32:00-03:00</updated>
    <id>http://troikatech.com/blog/2014/04/02/property-based-testing-in-ruby</id>
    <content type="html"><![CDATA[<p>For the past year or so I have slowly been dipping my feet into the vast functional programming seas. From taking the awesome <a href="http://coursera.org">Coursera</a> <a href="https://www.coursera.org/course/progfun">offerings</a> <a href="https://www.coursera.org/course/reactive">from Typesafe</a> to slowly working through RÃºnar Bjarnason&rsquo;s and Paul Chiusano&rsquo;s <em><a href="http://www.manning.com/bjarnason/">Functional Programming in Scala</a></em>, my mind has been expanding proportionally to the time I dedicate to learning its ways. It has been incredibly rewarding and humbling.</p>

<p>One such reward has been coming into direct touch with property-based testing. This technique, first developed by <a href="http://en.wikipedia.org/wiki/QuickCheck">QuickCheck</a> in Haskell-land, spins automated testing on its head: instead of codifying what is proper behavior by asserting that the outputs for given inputs match what is expected, the tester establishes logical properties about what should happen and lets the tool generate loads of inputs to check if they hold. If something goes wrong, the tool will then try to find the smallest test input that breaks the property (<em>falsifies</em> it), a process called <em>shrinking</em>; if it can&rsquo;t find anything, you can sigh with relief and think about what to scrutinize next.</p>

<p>Having a QuickCheck-like tool at your disposal can be incredibly powerful. The more complex the software or the algorithm, the greater the likelihood of your carefully curated unit and integration tests having blind spots. <a href="http://basho.com">Basho</a>, for instance, <a href="http://basho.com/quickchecking-poolboy-for-fun-and-profit/">have written about the stark realization that their worker pool library was full of subtle bugs by using QuickCheck for Erlang</a>, and you can find <a href="http://www.quviq.com/documents/erlang001-arts.pdf">other</a> <a href="http://www.autosar.org/download/conferencedocs11/12_AUTOSAR_ModelBased_Quviq.pdf">instances</a> of how the technique helped make better software.</p>

<p>I don&rsquo;t know about you, but when I come in contact with stuff like that I immediately think of how improved parts of my day job would be if I just could apply it. Considering that my daily duties are conducted in Ruby, I felt it was time I explored the subject in that realm.</p>

<h2>A contrived setup that hopefully shows how it can work out</h2>

<p>Let&rsquo;s say we&rsquo;ve decided to implement our own linked list class in Ruby. We would probably start our implementation with something like this:</p>

<p>``` ruby &ldquo;List&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-list-rb">https://gist.github.com/dodecaphonic/9934064#file-list-rb</a>
require &ldquo;singleton&rdquo;</p>

<p>class Nil
  include Singleton</p>

<p>  def empty?; true; end</p>

<p>  def to_s</p>

<pre><code>"Nil"
</code></pre>

<p>  end
end</p>

<p>class Cons
  def initialize(head, tail = Nil.instance)</p>

<pre><code>@head = head
@tail = tail
</code></pre>

<p>  end</p>

<p>  attr_reader :head, :tail</p>

<p>  def empty?; false; end</p>

<p>  def to_s</p>

<pre><code>"(#{head} . #{tail.to_s})"
</code></pre>

<p>  end
end
```</p>

<p>Using that <em>very</em> convenient API, we can build lists:</p>

<p>``` ruby</p>

<blockquote><blockquote><p>l = Cons.new(1, Cons.new(2, Cons.new(3, Nil.instance)))
l.to_s # => &ldquo;(1 . (2 . (3 . Nil)))&rdquo;
```</p></blockquote></blockquote>

<p>We know that, in a linked list, adding to the head is O(1), while appending to the end is O(n). So we build algorithms that respect its efficiency guarantees. However, when we, say, map this list into another list, it results in the following situation:</p>

<p>``` ruby &ldquo;List&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-list-rb">https://gist.github.com/dodecaphonic/9934064#file-list-rb</a>
def do_something_amazing(list, acc = Nil.instance)
  super_value = list.head * 1337
  if list.tail.empty?</p>

<pre><code>acc
</code></pre>

<p>  else</p>

<pre><code>do_something_amazing(list.tail, List.new(super_value, acc))
</code></pre>

<p>  end
end</p>

<blockquote><blockquote><p>do_something(l).to_s # => &ldquo;(4011 . (2674 . (1337 . Nil)))&rdquo;
```</p></blockquote></blockquote>

<p>Processing things from head to tail means the list ends up reversed. It&rsquo;s common, then, to reverse it back when we&rsquo;re done processing, to preserve the order an external user would expect. Let&rsquo;s add a <code>reverse</code> method to a <code>List</code> helper module:</p>

<p>``` ruby &ldquo;List&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-list-rb">https://gist.github.com/dodecaphonic/9934064#file-list-rb</a>
module List
  def self.reverse(list, acc = Nil.instance)</p>

<pre><code>if list.empty?
  acc
else
  reverse(list.tail, Cons.new(list.head, acc))
end
</code></pre>

<p>  end
end
```</p>

<p>So when we try to reverse what was created in <code>do_something_amazing</code>, we get what we need:</p>

<p><code>ruby
List.reverse(do_something_amazing(l)).to_s # =&gt; "(1337 . (2674 . (4011 . Nil)))"
</code></p>

<p>Awesome. I think this is enough for us to start exploring properties. If you&rsquo;re getting bored, take a sip of coffee and come back when you&rsquo;re ready. There&rsquo;s a few cool tricks below the fold.</p>

<h2>Testing the old way</h2>

<p>Being the good developers we are, we are covering that code with tests:</p>

<p>``` ruby &ldquo;List Tests&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-list_test-rb">https://gist.github.com/dodecaphonic/9934064#file-list_test-rb</a>
class ListTest &lt; MiniTest::Test
  def test_reversing_lists</p>

<pre><code>assert_equal "(3 . (2 . (1 . Nil)))",
  List.reverse(Cons.new(1, Cons.new(2, Cons.new(3)))).to_s
assert_equal "(9 . (400 . (321 . (1 . (10 . Nil)))))",
  List.reverse(Cons.new(10, Cons.new(1, Cons.new(321, Cons.new(400, Cons.new(9)))))).to_s
assert_equal "Nil", List.reverse(Nil.instance).to_s
assert_equal "(1 . Nil)", List.reverse(Cons.new(1)).to_s
</code></pre>

<p>  end
end
```</p>

<p>We&rsquo;re pretty confident that&rsquo;s enough, even if it was kind of boring to do manually. That amount of testing would let us go home and sleep soundly.</p>

<h2>Testing the QuickCheck way</h2>

<p>First, we&rsquo;ll need something like QuickCheck in Ruby. The best, most idiomatic, most maintained, least-Monad-y thing I have found is <a href="https://github.com/hayeah/rantly">Rantly</a>. It has both primitive value generation built-in and property testing with shrinking. We&rsquo;ll skip over the basic API and go straight to defining a property to check if my algorithm is really bullet-proof. To aid in the creation of lists from Arrays, we&rsquo;ll add a new helper:</p>

<p>``` ruby &ldquo;List&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-list-rb">https://gist.github.com/dodecaphonic/9934064#file-list-rb</a>
module List
  # &hellip;
  def self.from_values(*values)</p>

<pre><code>values.reverse.inject(Nil.instance) { |ls, v| Cons.new(v, ls) }
</code></pre>

<p>  end
end
```</p>

<p>To check that it works, let&rsquo;s change the existing tests and see if they still pass:</p>

<p>``` ruby &ldquo;List Tests&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-list_test-rb">https://gist.github.com/dodecaphonic/9934064#file-list_test-rb</a>
class ListTest &lt; MiniTest::Test
  def test_reversing_lists</p>

<pre><code>assert_equal "(3 . (2 . (1 . Nil)))",
  List.reverse(List.from_values(1, 2, 3)).to_s
assert_equal "(9 . (400 . (321 . (1 . (10 . Nil)))))",
  List.reverse(List.from_values(10, 1, 321, 400, 9)).to_s
assert_equal "Nil", List.reverse(Nil.instance).to_s
assert_equal "(1 . Nil)", List.reverse(List.from_values(1)).to_s
</code></pre>

<p>  end
end
```</p>

<p>```
Run options: &mdash;seed 48889</p>

<h1>Running:</h1>

<p>.</p>

<p>Finished in 0.001256s, 796.1783 runs/s, 3184.7134 assertions/s.</p>

<p>1 runs, 4 assertions, 0 failures, 0 errors, 0 skips
```</p>

<p>Great. Now to the newfangled thing. As I mentioned before, writing a property to check requires us to think differently than we would with regular unit tests. Your formulation should state something logical, something that does not rely on specific inputs. Following that guideline, we can reason about reversing lists in the following manner:</p>

<p>``` ruby &ldquo;List Tests&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-list2_test-rb">https://gist.github.com/dodecaphonic/9934064#file-list2_test-rb</a>
  # &hellip;
  def test_reversing_by_property</p>

<pre><code>property {
  length = range(0, 1_000_000)
  List.from_values(array(length) { integer })
}.check { |list|
  assert_equal list.to_s, List.reverse(List.reverse(list)).to_s
}
</code></pre>

<p>  end
  # &hellip;
```</p>

<p>The meat is in the <code>check</code> block. Determining that a list has been reversed correctly requires us to check if reversing it again gets us back to the original list. To seed our check, we build a <code>property</code> block that creats an array with a random length between 0 and 1_000_000, itself filled with random integers. Let&rsquo;s run the tests again:</p>

<p>```
$ bundle exec ruby list.rb
Run options: &mdash;seed 17130</p>

<h1>Running:</h1>

<p>.
&hellip;&hellip;&hellip;.
success: 100 tests
.</p>

<p>Finished in 121.969127s, 0.0164 runs/s, 0.8527 assertions/s.</p>

<p>2 runs, 104 assertions, 0 failures, 0 errors, 0 skips
```</p>

<p>It took a while (we wanted to be thorough, with those million-item arrays), but we&rsquo;re pretty sure it works. I&rsquo;m a believer and I&rsquo;m stoked; when I look at you, however, I see a face that says &ldquo;look, it&rsquo;s cool and all, but isn&rsquo;t it <em>kind of worthless</em>? The tests we had were telling us the same thing, and we only needed the power of our minds to generate the correct inputs. Why go through so much trouble?&rdquo;</p>

<p>Well, what about those times when ours minds fail us?</p>

<h2>Catching a bug with Rantly</h2>

<p>Let&rsquo;s say you&rsquo;re excited about building your own data structures and want to wrap that linked list inside a very inefficient Set. You mutter to yourself that you should make sure items are not inserted twice, which for now seems to be the main difference between Sets and Lists as storage containers.</p>

<p>You build a little more structure into what you already have, adding a <code>prepend</code> method and inlining <code>reverse</code> into a <code>List</code> base class:</p>

<p>```ruby &ldquo;List 2&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-list2-rb">https://gist.github.com/dodecaphonic/9934064#file-list2-rb</a></p>

<p>class List
  def to_s</p>

<pre><code>raise "Don't use this directly, fool"
</code></pre>

<p>  end</p>

<p>  def empty?; true; end</p>

<p>  def prepend(v)</p>

<pre><code>Cons.new(v, self)
</code></pre>

<p>  end</p>

<p>  def reverse(acc = Nil.instance)</p>

<pre><code>if empty?
  acc
else
  tail.reverse(Cons.new(head, acc))
end
</code></pre>

<p>  end</p>

<p>  def self.from_values(*values)</p>

<pre><code>values.reverse.inject(Nil.instance) { |ls, v| Cons.new(v, ls) }
</code></pre>

<p>  end<br/>
end</p>

<p>class Nil &lt; List
  include Singleton</p>

<p>  def to_s</p>

<pre><code>"Nil"
</code></pre>

<p>  end
end</p>

<p>class Cons &lt; List
  def initialize(head, tail = Nil.instance)</p>

<pre><code>@head = head
@tail = tail
</code></pre>

<p>  end</p>

<p>  attr_reader :head, :tail</p>

<p>  def empty?; false; end</p>

<p>  def to_s</p>

<pre><code>"(#{head} . #{tail.to_s})"
</code></pre>

<p>  end
end
```</p>

<p>To check if an item exists, you add a <code>contains?</code> method:</p>

<p>``` ruby &ldquo;List with contains&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-list2-rb">https://gist.github.com/dodecaphonic/9934064#file-list2-rb</a>
class List
  # ..
  def contains?(v); false; end
  # ..
end</p>

<p>class Cons &lt; List
  # ..
  def contains?(v)</p>

<pre><code>head == v || tail.contains?(v)
</code></pre>

<p>  end
  # ..
end
```</p>

<p>Then you write your immutable Set and matching tests:</p>

<p>``` ruby &ldquo;A dumb set implementation&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-set-rb">https://gist.github.com/dodecaphonic/9934064#file-set-rb</a>
class DumbSet
  def initialize(storage = Nil.instance)</p>

<pre><code>@storage = storage
</code></pre>

<p>  end</p>

<p>  attr_reader :storage
  private     :storage</p>

<p>  def push(v)</p>

<pre><code>if !storage.contains?(v)
  DumbSet.new(storage.prepend(v))
else
  self
end
</code></pre>

<p>  end
  alias_method :&lt;&lt;, :push</p>

<p>  def contains?(v)</p>

<pre><code>storage.contains?(v)
</code></pre>

<p>  end</p>

<p>  def to_a</p>

<pre><code>values = []
list   = storage
until list.empty?
  values &lt;&lt; list.head
  list = list.tail
end
values
</code></pre>

<p>  end
end</p>

<p>class DumbSetTest &lt; Minitest::Test
  def setup</p>

<pre><code>@s = (((DumbSet.new &lt;&lt; 1) &lt;&lt; 2) &lt;&lt; 3)
</code></pre>

<p>  end</p>

<p>  attr_reader :s</p>

<p>  def test_contains</p>

<pre><code>assert s.contains?(3)
assert s.contains?(2)
assert s.contains?(1)
assert !s.contains?(4)
</code></pre>

<p>  end</p>

<p>  def test_uniqueness</p>

<pre><code>assert_equal [-32, 1, 2, 3], (s &lt;&lt; -32 &lt;&lt; -32 &lt;&lt; -32).to_a.sort
</code></pre>

<p>  end
end
```</p>

<p>And because I spotted you writing new code and yelled &ldquo;HEY USE RANTLY IT&rsquo;S SO COOL YIPEE&rdquo;, you add some property tests:</p>

<p>``` ruby
class DumbSetTest &lt; Minitest::Test
  # &hellip;
def test_contains_property</p>

<pre><code>property {
  array(range(0, 100)) { integer }
}.check { |vs|
  s = vs.inject(DumbSet.new) { |ds, v| ds &lt;&lt; v }
  assert vs.all? { |v| s.contains?(v) }
}
</code></pre>

<p>  end</p>

<p>  def test_uniqueness_property</p>

<pre><code>property {
  array(range(0, 100)) { integer }
}.check { |vs|
  ns = vs.inject(DumbSet.new) { |ds, v| ds &lt;&lt; v }
  rs = vs.inject(ns) { |ds, v| ds &lt;&lt; v }
  assert_equal vs.sort, ns.to_a.sort
}
</code></pre>

<p>  end
  # &hellip;
end<br/>
```</p>

<p>It looks good:</p>

<p>```
$ bundle exec ruby set_test.rb
Run options: &mdash;seed 15625</p>

<h1>Running:</h1>

<p>&hellip;&hellip;&hellip;.
success: 100 tests
..
&hellip;&hellip;&hellip;.
success: 100 tests
..</p>

<p>Finished in 0.119717s, 33.4121 runs/s, 1720.7247 assertions/s.</p>

<p>4 runs, 206 assertions, 0 failures, 0 errors, 0 skips
```</p>

<p>You then implement the removal of items:</p>

<p>``` ruby &ldquo;Set with delete&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-set-rb">https://gist.github.com/dodecaphonic/9934064#file-set-rb</a>
class DumbSet
  # &hellip;
  def delete(v)</p>

<pre><code>ls = storage
ns = DumbSet.new

while !ls.empty?
  if ls.head != v
    ns = ns &lt;&lt; v
  end

  ls = ls.tail
end

ns
</code></pre>

<p>  end
  # &hellip;
end</p>

<p>class DumbSetTest &lt; Minitest::TestCase
  # &hellip;
  def test_delete</p>

<pre><code>os = (((DumbSet.new &lt;&lt; 1) &lt;&lt; 2) &lt;&lt; 3)
ns = os.delete(1337)
assert_equal [1, 2, 3], ns.to_a.sort
ns = os.delete(3)
assert_equal [1, 2], ns.to_a.sort
ns = ns.delete(2)
assert_equal [1], ns.to_a.sort
ns = (ns &lt;&lt; 432).delete(1)
assert_equal [432], ns.to_a.sort
ns = ns.delete(432)
assert_equal [], ns.to_a.sort
</code></pre>

<p>  end
  # &hellip;
end
```</p>

<p>Your tests pass, but this time you don&rsquo;t listen to me about adding another property. You&rsquo;re just not that convinced they&rsquo;re worth their salt, and it looks good enough to ship with all the tests you&rsquo;ve added. The PokÃ©mon Collecting app you work on can benefit from it right now, instead of 20 minutes from now. To production it goes.</p>

<p>Time goes by, and you&rsquo;ve forgotten about me and our little adventure. Your system is humming along and moved on to maintenance mode. Days have been kind of slow, so you decide to add an optimization you&rsquo;ve read about in Hacker News, detailing how a node.js program got a 10x speedup. You modify your delete method accordingly:</p>

<p>``` ruby &ldquo;Set Tests&rdquo; <a href="https://gist.github.com/dodecaphonic/9934064#file-set_test-rb">https://gist.github.com/dodecaphonic/9934064#file-set_test-rb</a>
  # &hellip;
  def delete(v)</p>

<pre><code>ls  = storage
tmp = DumbSet.new

while !ls.empty?
  if (ls.head != v) &amp;&amp; (ls.head &lt; 1500) # secret performance trick
    tmp = tmp &lt;&lt; ls.head
  end

  ls = ls.tail
end

tmp
</code></pre>

<p>  end
  # &hellip;
```</p>

<p>CI still reports all green.</p>

<p>A few days later, you receive a report from a User telling she deleted their PokÃ©mon with power level 3, but her PokÃ©mons with levels 4013, 1551 and 20000 disappeared. Your first line of defense &mdash; your tests &mdash; have not caught any issues. Sweating bullets and drowning in emails from stakeholders and other PokÃ©mon fiends, you&rsquo;re about to collapse.</p>

<p>And then you remember: what about trying to express a property to see if it holds?</p>

<p>``` ruby
  # We&rsquo;ll add at most 10 unique items and then delete the first
  # 2. If there&rsquo;s anything wrong, this will blow up.
  def test_delete_property</p>

<pre><code>property {
  array(10) { range(0, 5000) }.uniq
}.check { |values|
  os = values.inject(DumbSet.new) { |s, v| s &lt;&lt; v }
  ds = values[0..1].inject(os) { |s, v| s.delete(v) }
  assert_equal (values.size - 2), ds.to_a.size
}
</code></pre>

<p>  end
```</p>

<p>You run it and it explodes:</p>

<p>```
$ bundle exec ruby set_test.rb
Run options: &mdash;seed 46455</p>

<h1>Running:</h1>

<p>&hellip;&hellip;&hellip;.
success: 100 tests
..
failure: 0 tests, on:
[384, 437, 120, 718, 1850, 4579, 3178, 4191, 533, 2669]
F
&hellip;&hellip;&hellip;.
success: 100 tests
&hellip;</p>

<p>Finished in 0.093858s, 63.9264 runs/s, 2248.0769 assertions/s.</p>

<p>  1) Failure:
DumbSetTest#test_delete_property [set_test.rb:69]:
Expected: 8
  Actual: 2</p>

<p>6 runs, 211 assertions, 1 failures, 0 errors, 0 skips
```</p>

<p>What? How come you&rsquo;ve only got 2 when you expected 8? Well, there must be something wrong with delete, after all. Let&rsquo;s take that array and try it on an <em>pry</em> session to see what happens:</p>

<p><code>
[1] pry(main)&gt; values = [384, 437, 120, 718, 1850, 4579, 3178, 4191, 533, 2669]
=&gt; [384, 437, 120, 718, 1850, 4579, 3178, 4191, 533, 2669]
[2] pry(main)&gt; os = values.inject(DumbSet.new) { |s, v| s &lt;&lt; v }
=&gt; #&lt;DumbSet...&gt;
[3] pry(main)&gt; values[0..1].inject(os) { |s, v| s.delete(v) }.to_a
=&gt; [718, 533]
</code></p>

<p>Wait a minute! Should delete also remove everything that&rsquo;s over 1000-ish? Is there anything in the code that stipulates such a thing? Maybe that node.js optimization was not so great after all. Let&rsquo;s remove it and run the tests:</p>

<p>```
$ bundle exec ruby set_test.rb
Run options: &mdash;seed 2727</p>

<h1>Running:</h1>

<p>.
&hellip;&hellip;&hellip;.
success: 100 tests
..
&hellip;&hellip;&hellip;.
success: 100 tests
.
&hellip;&hellip;&hellip;.
success: 100 tests
..</p>

<p>Finished in 0.099329s, 60.4053 runs/s, 3120.9415 assertions/s.</p>

<p>6 runs, 310 assertions, 0 failures, 0 errors, 0 skips
```</p>

<p>VoilÃ : properties have saved the day, and you&rsquo;ve learned not to trust Hacker News bravado ever again.</p>

<h2>Is using Rantly the same as using QuickCheck or ScalaCheck?</h2>

<p>Sort of. For one, you have to write your own generators every time you want something other than basic types, while both QuickCheck and ScalaCheck can figure out a lot by themselves. This can make expressing what you mean a lot easier, and you don&rsquo;t spend time debugging your <code>property</code> blocks in search of mistakes. That said, writing a generator for your own types requires only that you instantiate them in the <code>property</code> blocks with other auto-generated values.</p>

<p>Shrinking is not as good in Rantly. It works ok a lot of the time, but it could be improved. On the surface, from skimming the algorithms used in ScalaCheck and Rantly, it doesn&rsquo;t <em>seem</em> that different, but over that side of the line the patterns in minimization seem easier to spot.</p>

<p>There&rsquo;s also no mechanism to test stateful code. ScalaCheck has <a href="https://github.com/rickynils/scalacheck/wiki/User-Guide#stateful-testing">Commands</a> to help in modeling state changes, and I&rsquo;m aware <a href="https://github.com/manopapad/proper">PropEr</a> and <a href="http://www.quviq.com/">QuickCheck for Erlang</a> also provide something in that direction.</p>

<p>One minor thing is that integration with RSpec and MiniTest could be improved. Its output pollutes the test run, and on large suites it becomes hard to know the relationship between a failed property and a failed test. It should be easy to fix for anyone motivated. On that note, there&rsquo;s no ready-made extension for MiniTest (although adding one is trivial enough that I&rsquo;m sending a PR to fix it).</p>

<h2>Final considerations</h2>

<p>I hope I have proven, even if with a craptastic example, that property-testing can aid you in writing better Ruby code. Our community is great when it comes to using tests both as a design and as a verification tool, and QuickCheck (via Rantly) is a new way of thinking about them. You should keep your TDD/BDD to carve out your objects and responsibilities, but also add property checks where suitable to strengthen your confidence in the system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Principles of Reactive Programming", a review]]></title>
    <link href="http://troikatech.com/blog/2014/01/12/reactive/"/>
    <updated>2014-01-12T13:15:00-02:00</updated>
    <id>http://troikatech.com/blog/2014/01/12/reactive</id>
    <content type="html"><![CDATA[<p>After the positive experience learning some Scala and some functional patterns in <a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a>, I was excited to undertake the new course from Martin Odersky and co. The fact that it would pick up from where it left off and build on the <a href="http://www.reactivemanifesto.org/">Reactive brouhaha</a> was icing in the cake; after all, the techniques and technologies approached in the lectures highlight some of what Scala does best.</p>

<h2>Structure</h2>

<p>It starts with mr. Odersky&rsquo;s already familiar style, reviewing some of what was taught in the previous course and expanding on some topics. The dreaded Monads were dealt with, and while I can&rsquo;t talk about the subject from a theoretical standpoint or offer a perfect explanation, I feel I grasp how they can be used to compose behavior and express functionality better.</p>

<p>The second part was the highlight, for me. Erik Meijer (from LINQ and Reactive Extensions fame on the .NET land) has an incredibly upbeat energy and great sense of humor, which carry you like a breeze through the amazing concepts he expresses. I loved thinking about Event streams and how to compose them using monadic combinators in the form of <code>Observables</code> (alongside <code>Subscriptions</code>, <code>Schedulers</code>, <code>Promises</code> and <code>Futures</code>). I think this affected me the most, for I could clearly see how to mix and match things to add behavior.</p>

<p>The third part was also very good. Roland Kuhn (Akka&rsquo;s tech lead) has a soft-spoken style that relaxes you while he lays the groundwork over which you&rsquo;ll learn about Actors, building distributed systems and dealing with failure in that model. He also shows piece by piece what <a href="http://akka.io">Akka</a> can do (which led me to explore more of <a href="https://github.com/celluloid/celluloid">Celluloid</a>, a topic for a future post).</p>

<h2>Exercises</h2>

<p>Everything comes together with each week&rsquo;s exercises. The first was a quick-and-simple one that explores <a href="http://www.scalacheck.org/">property testing</a>. I went through it quickly, but I still find it hard to apply that mode of thinking, and didn&rsquo;t get much out of the technique later on. I know this is a personal limitation, as some people in the course forums mentioned using it to great effect.</p>

<p>After that, you get a wake-up call that this is gonna require some hard work right as you&rsquo;re asked to build two simulations: one of circuits, with emphasis on building a demultiplexer, and one of an epidemy. The fact that this involves timing and sequencing makes you think about state and purely functional programs. Building something substantial (and fun to watch) gives you an appreciation of their usefulness.</p>

<p><img src="http://dl.dropboxusercontent.com/s/ml6pp98zwfufbob/2014-01-12%20at%2014.52.png" alt="Epidemy simulation" /></p>

<p>Erik Meijer&rsquo;s had cool, practical examples: you build a node-style web server (with a Reactor loop) in the first week and a Wikipedia Swing client using reactive streams for GUI events and networking in the second. It makes you want to write everything in this style, because it becomes much easier to think about <em>what</em> happens <em>when</em> with <em>whom</em>.</p>

<p>The third section, on Akka, takes the prize in this area: first you redo the binary search tree exercise from the first course using Actors, which I found a great idea, as you&rsquo;re confronted just with the new concepts. Then you are challenged into building a (simplified) distributed key-value store, including replication and joining of new nodes. Describing this exercise to colleagues made them want to take the course. I hope they do.</p>

<h2>Scala</h2>

<p>Being forced to use more Scala made my interest in it grow more and more. <a href="https://al3x.net/">Alex Payne</a> has said that it feels a bit like Ruby in its expressiveness, and I got that while building the exercises. I confess it is refreshing and enlightening to use types as a way of reasoning, and not as something that just soothes a compiler with a frail ego.</p>

<p>On the other hand, tooling was problematic. Being an Emacs user, I try to keep in it at all times, and surprisingly (coupled with <a href="https://github.com/aemoncannon/ensime">ENSIME</a>) the experience was not bad. Still I tried to take the opportunity to learn a little bit more about what is offered and how well it works, and the experience was not so great. Importing the provided Eclipse projects sometimes resulted in missing dependencies; importing the sbt project in IntelliJ IDEA resulted in error messages complaining about the TEST context, which some of the students claimed could be solved with nightly builds of its Scala and SBT plugins.</p>

<p>In ENSIME it mostly worked fine. Sometimes I needed to run the tests before generating the project in <code>sbt</code>, or to regenerate the project as I fleshed out the code. This was not that that awful, in the end: coming from a world of no static types, no code completion, poor navigation (seriously, guys, I&rsquo;ve used dynamic languages for over 15 years, and grep/ack/ag is not a good replacement) and pretty crude automatic refactorings, it felt like I was thrown into a better world. I find myself missing it in my daily Ruby dealings.</p>

<p><img src="http://dl.dropboxusercontent.com/s/c0ce5j0jlknn90r/2014-01-12%20at%2014.47.png" alt="ENSIME as I worked through the exercises" /></p>

<p>I realize the situation with Eclipse and IntelliJ may be specific to the course, as the canonical thing to use was sbt. However, being that sbt is the canonical build tool, period, it made the experience messy, and complaints in the forum suggest there&rsquo;s still a lot to improve here. We developers are used these sorts of hurdles (and, let&rsquo;s be frank, to learning workarounds), but this is the type of thing that turns off someone that is not yet invested in the tech.</p>

<h2>What I learned about myself</h2>

<p>Comparing my approach to my fellow students', I found I could go through most things relatively easily, based on experience alone, but that eventually I had to exercise muscles in areas I consider mostly weak: self-reliance and grit. It was necessary to overcome my impulse to procrastinate when facing a roadblock, and also to not feel guilty about going to the forums, reading about other people&rsquo;s struggles or using a test suite that some kind soul provided for everyone else.</p>

<p>To face things that are known but empirically unexplored made me question my ability, and demanded a hard look at my self-image. It took great care and some pain to keep motivated and think of the outcome. The sense of pride from having completed this without delaying a single exercise makes me believe I can accomplish more. Furthermore, getting a near-perfect score for the effort is very sweet.</p>

<p>I hope this helps me become a little more patient. My instinct is to go for quick intellectual gratification, for tight feedback loops, and that is not always possible (or even desirable). Standing on the shoulder of giants requires a climb; I must remember not be discouraged after the first stretch.</p>

<h2>Conclusion</h2>

<p>I recommend everyone to go through this course. It is challenging, rewarding and (for me) a good source of personal growth. Scala is very interesting, and worthy of your time, and Akka is incredible. I found the different teaching styles refreshing, a great way to keep the learner engaged. All in all, a delightful experience.</p>
]]></content>
  </entry>
  
</feed>
